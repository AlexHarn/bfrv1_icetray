"""
This example script show how to inject background events (either from MuonGun or
a CORSIKA file at generation-level (i.e. before lepton propagation).

It is assumed that the input file cointains primary MCTrees
(CORSIKA-5comp, NuGen, GENIE, etc.) and the background file contains CR-showers
pregenerated by CORSIKA with a natural spectrum (e.g. Hoerandel Polygonato).
"""

import icecube
from icecube import icetray, dataio, phys_services, polyplopia, MuonGun
from icecube import dataclasses
from icecube.simprod import segments
from optparse import OptionParser

from I3Tray import *

usage = "usage: %prog [options]"
parser = OptionParser(usage)
parser.add_option("-o", "--outfile",default="merged.i3", dest="OUTFILE", help="Write output to OUTFILE (.i3{.gz} format)")
parser.add_option("-g", "--gcdfile",dest="GCDFILE", help="Input Geometry Calibration Detector status (.i3{.gz} format)")
parser.add_option("--seed",type="int",default=12344, dest="SEED", help="Initial seed for the random number generator")
parser.add_option("--inputfile",dest="INPUTFILE", help="pre-generated input events")
parser.add_option("--backgroundfile",dest="BACKGROUNDFILE", help="pregenerated background CORSIKA events")
parser.add_option("--propagate-muons",dest="PROPAGATE", help="propagate muons for signal events (run PROPOSAL)")
parser.add_option("--propagate-photons",dest="RUNCLSIM", help="propagate photons")
parser.add_option("--use-ppc",dest="USEPPC", help="Propagate with ppc instead of clsim")
parser.add_option("--use-cpu",dest="USECPU", help="Use cpu instead of gpu.")

(options,args) = parser.parse_args()
if len(args) != 0:
        crap = "Got undefined options:"
        for a in args:
                crap += a
                crap += " "
        parser.error(crap)


tray = I3Tray()

gcdfile = options.GCDFILE
inputfile = options.INPUTFILE


randomService = phys_services.I3SPRNGRandomService(options.SEED,nstreams=2,streamnum=0)
randomServiceForPropagators = phys_services.I3SPRNGRandomService(options.SEED,nstreams=2,streamnum=1)

tray.context["I3RandomService"] = randomService
tray.context["I3RandomServiceForPropagators"] = randomServiceForPropagators
tray.context['I3SummaryService'] = dataclasses.I3MapStringDouble()

# Configure tray
tray.AddModule("I3Reader","reader",filenamelist=[gcdfile,inputfile])

# Pregenerated events are assumed to be propagated unless specified
if options.PROPAGATE:
   tray.AddModule("Rename",keys=["I3MCTree","I3MCTree_preMuonProp"])
   tray.AddSegment(segments.PropagateMuons, "PropagateMuons",
            RandomService = randomServiceForPropagators)

if options.RUNCLSIM:
   tray.AddSegment(segments.PropagatePhotons, "normalpes",
            RandomService = "I3RandomService",
            HybridMode = False,
            IgnoreMuons = False,
            IgnoreCascades = False,
            UseGPUs = True,
            UseAllCPUCores = False,
            InputMCTree = "I3MCTree",
            UseGeant4 = False)

# Do merge background and generate MCPEs 
tray.AddSegment(segments.PolyplopiaPhotons,'coincident_pes',
       mctype='CORSIKA',
       UsePPC = options.USEPPC,
       UseGPUs = not options.USECPU,
       RandomService= randomService,
       mctree_name = "I3MCTree",
       bgfile = options.BACKGROUNDFILE,
       timewindow = 40.*I3Units.microsecond,
       DOMOversizeFactor = 5,
       Efficiency = 0.99,
       PhotonSeriesName = "I3MCPESeriesMap")

tray.AddModule("Dump")


tray.AddModule("I3Writer","write",Filename=options.OUTFILE)

tray.Execute()


