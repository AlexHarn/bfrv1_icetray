#!/usr/bin/env python
"""
This example script show how to inject background events (either from MuonGun or
a CORSIKA file at generation-level (i.e. before lepton propagation).

It is assumed that the input file cointains primary MCTrees
(CORSIKA-5comp, NuGen, GENIE, etc.) and the background file contains CR-showers
pregenerated by CORSIKA with a natural spectrum (e.g. Hoerandel Polygonato).
"""
from os.path import expandvars
import icecube
from icecube import icetray, dataio, phys_services, polyplopia, MuonGun, dataclasses
from icecube.simprod import segments, util
from optparse import OptionParser

from I3Tray import *

i3_testdata = expandvars("$I3_TESTDATA")
gcdfile = i3_testdata + "/GCD/GeoCalibDetectorStatus_IC86.55697_corrected_V2.i3.gz"
bgfile = i3_testdata + "/sim/hoerandel_corsika.i3.zst"

usage = "usage: %prog [options]"
parser = OptionParser(usage)
parser.add_option("-o", "--outfile", default="merged.i3", dest="OUTFILE", help="Write output to OUTFILE (.i3{.gz} format)")
parser.add_option("--seed",type="int", default=12344, dest="SEED", help="Initial seed for the random number generator")
parser.add_option("--nevents", type="int", dest="NEVENTS", default=200, help="Stop after given number of events")
parser.add_option("--propagate-photons",dest="RUNCLSIM", action="store_true",
                   default=False, help="Propagate photons for combined events")
parser.add_option("--use-gpu", dest="GPU", action="store_true", 
                   default=False, help="Use GPU for photon propagation")

(options,args) = parser.parse_args()
if len(args) != 0:
        crap = "Got undefined options:"
        for a in args:
                crap += a
                crap += " "
        parser.error(crap)


tray = I3Tray()

randomService = phys_services.I3GSLRandomService(options.SEED)
randomServiceForPropagators = phys_services.I3GSLRandomService(options.SEED)

tray.context["I3RandomService"] = randomService
tray.context["I3RandomServiceForPropagators"] = randomServiceForPropagators
tray.context['I3SummaryService'] = dataclasses.I3MapStringDouble()


tray.AddModule("I3InfiniteSource", "TMA-2",
   Stream = icetray.I3Frame.DAQ,
   Prefix = gcdfile)


# Read pre-generated CORSIKA file with CR showers. Assumed that events inf i3
# files follow natural spectrum (e.g. Hoerandel)
background = polyplopia.CoincidentI3ReaderService(bgfile)

def add_muon(f):
    f["I3MCTree"] = background.get_next()
    return True

tray.AddModule(add_muon,"primary", streams = [icetray.I3Frame.DAQ])

# Configure tray
tray.AddModule("PoissonMerger","merge", CoincidentEventService = background)
tray.AddModule("Rename",keys=["I3MCTree","I3MCTree_preMuonProp"])

# Pregenerated events are assumed not to be propagated
tray.AddSegment(segments.PropagateMuons, "PropagateMuons",
    RandomService = randomServiceForPropagators)

if options.RUNCLSIM:
    # Do the rest of the simulaton
    tray.AddSegment(segments.PropagatePhotons, "normalpes",
            RandomService = "I3RandomService",
            HybridMode = False,
            IgnoreMuons = False,
            IgnoreCascades = False,
            UseGPUs = options.GPU,
            UseAllCPUCores = False,
            InputMCTree = "I3MCTree",
            UseGeant4 = False)

    tray.AddModule("MPHitFilter","hitfilter", 
        HitOMThreshold=1,
    )

#tray.AddModule("Dump")


tray.AddModule("I3Writer","write",Filename=options.OUTFILE)

if options.NEVENTS:
  tray.Execute(options.NEVENTS)
else:
  tray.Execute()


