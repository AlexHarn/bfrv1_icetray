#include <I3Test.h>
#include <icetray/I3Logging.h>

#include <cstdlib>
#include <iostream>
#include <map>
#include <set>

#include <g4-tankresponse/bowyer/delaunay.h>
#include <g4-tankresponse/bowyer/edge.h>
#include <g4-tankresponse/bowyer/triangle.h>

#include <boost/multi_index_container.hpp>
#include <boost/multi_index/ordered_index.hpp>
#include <boost/multi_index/identity.hpp>
#include <boost/multi_index/member.hpp>
#include <boost/multi_index/composite_key.hpp>

TEST_GROUP(s_hull);
using std::cout;
using std::endl;
using std::string;
using std::vector;
using std::map;
using std::pair;
using std::set;
using std::min;
using std::max;

namespace bmi = boost::multi_index;

namespace {
  struct Point {
    size_t id;
    double x;
    double y;
  };

  struct id{};
  struct position{};
  typedef bmi::multi_index_container<
    Point,
    bmi::indexed_by<
      //bmi::ordered_unique<bmi::tag<id>, bmi::member<Point,size_t,&Point::id> >,
      bmi::ordered_non_unique<bmi::tag<position>,
                              bmi::composite_key<Point,
                                                 bmi::member<Point,double,&Point::x>,
                                                 bmi::member<Point,double,&Point::y>
                                                 >
                              >
      >
    > IndexedPoints;

  double Square(double a) {return a*a;}

  template<typename T>
  void
  CircumCircle(const Vector2<T> &pt0, const Vector2<T> &pt1, const Vector2<T> &pt2,
               double &r,double &c, double &ro2)
  {
    const double a1 = (pt0.x+pt1.x)/2.0;
    const double a2 = (pt0.y+pt1.y)/2.0;
    const double b1 = (pt2.x+pt1.x)/2.0;
    const double b2 = (pt2.y+pt1.y)/2.0;
    const double e2 = pt0.x-pt1.x;
    const double e1 = -pt0.y+pt1.y;

    const double q2 = pt2.x-pt1.x;
    const double q1 = -pt2.y+pt1.y;

    if ( -e1*q2 + e2*q1 == 0 ) {
      r=0; c=0; ro2=-1;
      return;
    }

    const double beta = (-e2*(b1-a1) + e1*(b2-a2))/( e2*q1-e1*q2);
    r = b1 + q1*beta;
    c = b2 + q2*beta;
    ro2 = (pt0.x-r)*(pt0.x-r) + (pt0.y-c)*(pt0.y-c);
  }

  template<typename T>
  void CheckDelaunay(std::vector<Vector2<T> > pts, std::vector<Triangle<T> > triangles)
  {
    cout << "Checking that the triangulation is indeed a Delaunay triangulation" << endl;
    struct FailInfo {
      unsigned int i;
      unsigned int j;
      double r2;
      double x;
      double y;
    };
    vector<FailInfo> fail;
    // loop over all triangles and check that there are no points, other than the ones in the triangle, within the circumcircle.
    for (unsigned int i = 0; i != triangles.size(); ++i) {
      double x,y,r2;
      CircumCircle(triangles[i].p1, triangles[i].p2, triangles[i].p3, x, y, r2);
      for (unsigned int j = 0; j != pts.size(); ++j) {
        if (pts[j]==triangles[i].p1 || pts[j]==triangles[i].p2 || pts[j]==triangles[i].p3)
          continue;
        const bool fail1 = Square(pts[j].x - x) + Square(pts[j].y - y) - r2 < 0;
        if (fail1) {
          fail.push_back({i, j, r2, x, y});
        }
      }
    }
    if (fail.size()>0) {
      cout << "Triangles failing Delaunay test:" << endl;
      for (unsigned int i = 0; i != fail.size(); ++i) {
        cout << "point " << fail[i].j << " in circumcircle of "
             << triangles[fail[i].i].p1.id << ", " << triangles[fail[i].i].p2.id << ", " << triangles[fail[i].i].p3.id << endl;
        cout << "    (" <<  pts[fail[i].j].x << " - " << fail[i].x << ")^2 + (" << pts[fail[i].j].y << " - " << fail[i].y << ")^2 = "
             << Square(pts[fail[i].j].x - fail[i].x) << " + " << Square(pts[fail[i].j].y - fail[i].y) << " < " << fail[i].r2 << endl;
      }
    }
    ENSURE(fail.size()==0, "Triangulation Delaunay test.");
  }

  template<typename T>
  void CheckHandedness(std::vector<Vector2<T> > pts, std::vector<Triangle<T> > triangles) {
    cout << "Checking that all triangles have a definite handedness" << endl;
    vector<size_t> rightHanded;
    vector<size_t> leftHanded;
    vector<size_t> zero;
    for (unsigned int i = 0; i != triangles.size(); ++i) {
      const Vector2<T>& p1 = triangles[i].p1;
      const Vector2<T>& p2 = triangles[i].p2;
      const Vector2<T>& p3 = triangles[i].p3;
      const double area = (p2.x-p1.x)*(p3.y-p1.y) - (p2.y-p1.y)*(p3.x-p1.x);
      if (area > 0) rightHanded.push_back(i);
      else if (area < 0) leftHanded.push_back(i);
      else zero.push_back(i);
      if (i==0) {
        cout << "(" << p1.x << ", " << p1.y << "), "
             << "(" << p2.x << ", " << p2.y << "), "
             << "(" << p3.x << ", " << p3.y << ")" << endl;
      }
    }
    cout << rightHanded.size() << " right handed triangles, "
         << leftHanded.size() << " left handed triangles, "
         << zero.size() << " empty triangles" << endl;
    ENSURE(zero.size()==0, "Empty triangles");
    ENSURE(rightHanded.size()==triangles.size(),"Right handedness");
  }

  template<typename T>
  inline bool triangle_order(const Triangle<T> &t1, const Triangle<T> &t2)
  {
    std::vector<size_t> ids_1 = {t1.p1.id, t1.p2.id, t1.p3.id};
    std::sort(ids_1.begin(), ids_1.end());
    std::vector<size_t> ids_2 = {t2.p1.id, t2.p2.id, t2.p3.id};
    std::sort(ids_2.begin(), ids_2.end());
    return (ids_1[0] == ids_2[0] && ids_1[1] == ids_2[1] && ids_1[2] < ids_2[2]) || (ids_1[0] == ids_2[0] && ids_1[1] < ids_2[1]) || (ids_1[0] < ids_2[0]);
  }

}


TEST(circumcircle)
{
  // this test the circumcircle functions. No idea if there are special cases yet.
  srandom(1);
  for (int i=0; i<100; i++) {
    double r,c,ro2;
    Vector2<double> p1(100*double(rand())/RAND_MAX, 100*double(rand())/RAND_MAX);
    Vector2<double> p2(100*double(rand())/RAND_MAX, 100*double(rand())/RAND_MAX);
    Vector2<double> p3(100*double(rand())/RAND_MAX, 100*double(rand())/RAND_MAX);
    CircumCircle(p1, p2, p3, r, c, ro2);
    ENSURE_DISTANCE((p1.x-r)*(p1.x-r) + (p1.y-c)*(p1.y-c), ro2, ro2*1e-4, "not a circumcircle");
    ENSURE_DISTANCE((p2.x-r)*(p2.x-r) + (p2.y-c)*(p2.y-c), ro2, ro2*1e-4, "not a circumcircle");
    ENSURE_DISTANCE((p3.x-r)*(p3.x-r) + (p3.y-c)*(p3.y-c), ro2, ro2*1e-4, "not a circumcircle");
  }
}


TEST(primitive)
{
  const size_t nPoints = 3;
  const double points[nPoints][2] = {
    { 0, 0 },
    { 2, 0 },
    { 1, 1 }
  };
  std::vector<Vector2<double> > pts;
  for(size_t i = 0; i < nPoints; ++i) {
    pts.push_back(Vector2<double>(points[i][0], points[i][1]));
  }

  Delaunay<double> triangulation;
  std::vector<Triangle<double> > triangles = triangulation.triangulate(pts);
  ENSURE_EQUAL(triangles.size(), 1);
  std::cout << pts.size() << " points, " << triangles.size() << " triangles generated\n";
  std::vector<Edge<double> > edges = triangulation.getEdges();
  ENSURE_EQUAL(edges.size(), 3);
}


TEST(square)
{
  // this is a degenerate case (it has two solutions)...
  const size_t nPoints = 4;
  const double points[nPoints][2] = {
    { 0, 0 },
    { 1, 0 },
    { 1, 1 },
    { 0, 1 }
  };
  std::vector<Vector2<double> > pts;
  for(size_t i = 0; i < nPoints; ++i) {
    pts.push_back(Vector2<double>(points[i][0], points[i][1]));
  }

  Delaunay<double> triangulation;
  std::vector<Triangle<double> > triangles = triangulation.triangulate(pts);
  ENSURE_EQUAL(triangles.size(), 2);
  std::cout << pts.size() << " points, " << triangles.size() << " triangles generated\n";
  for (auto &p: pts) { cout << p << endl; }
  for (auto &t: triangles) { cout << t << endl; }
  std::vector<Edge<double> > edges = triangulation.getEdges();
  for (auto &e: edges) { cout << e << endl; }
  ENSURE_EQUAL(edges.size(), 6);
  CheckDelaunay<double>(pts, triangles);
}

// points for the large-test
namespace AllIceTopPoints {

  Point tanks[486] = {
{   0,  -195318.0,  -491697.0}, {   1,  -186115.0,  -495609.0}, {   2,  -187330.0,  -485683.0}, {   3,  -174132.0,  -489105.0},
{   4,  -183335.0,  -485194.0}, {   5,  -182121.0,  -495120.0}, {   6,   -81560.0,  -481194.0}, {   7,   -71634.0,  -479979.0},
{   8,   -77648.8,  -471990.0}, {   9,   -65010.2,  -468734.0}, {  10,   -74936.2,  -469948.0}, {  11,   -68921.4,  -477937.0},
{  12,    50756.9,  -453022.0}, {  13,    60202.9,  -456304.0}, {  14,    58322.4,  -446483.0}, {  15,    71707.9,  -449011.0},
{  16,    62261.9,  -445728.0}, {  17,    64142.4,  -455550.0}, {  18,   162303.0,  -450441.0}, {  19,   171273.0,  -446021.0},
{  20,   162960.0,  -440462.0}, {  21,   173886.0,  -433117.0}, {  22,   164916.0,  -437537.0}, {  23,   173229.0,  -443095.0},
{  24,   301601.0,  -411211.0}, {  25,   310128.0,  -416435.0}, {  26,   310388.0,  -406438.0}, {  27,   322759.0,  -411761.0},
{  28,   314232.0,  -406538.0}, {  29,   313972.0,  -416535.0}, {  30,  -284750.0,  -406346.0}, {  31,  -274965.0,  -404286.0},
{  32,  -281642.0,  -396842.0}, {  33,  -269115.0,  -392321.0}, {  34,  -278900.0,  -394382.0}, {  35,  -272223.0,  -401826.0},
{  36,  -139957.0,  -371318.0}, {  37,  -133078.0,  -378576.0}, {  38,  -130232.0,  -368989.0}, {  39,  -119758.0,  -377314.0},
{  40,  -126637.0,  -370057.0}, {  41,  -129483.0,  -379643.0}, {  42,   -29679.2,  -357304.0}, {  43,   -19971.3,  -359703.0},
{  44,   -22747.4,  -350096.0}, {  45,    -9156.1,  -351373.0}, {  46,   -18864.0,  -348974.0}, {  47,   -16087.8,  -358581.0},
{  48,    87075.0,  -372339.0}, {  49,    90887.2,  -363094.0}, {  50,    80974.9,  -364415.0}, {  51,    84229.7,  -350988.0},
{  52,    80417.5,  -360233.0}, {  53,    90329.9,  -358912.0}, {  54,   224148.0,  -313066.0}, {  55,   232216.0,  -318974.0},
{  56,   233298.0,  -309033.0}, {  57,   245272.0,  -315366.0}, {  58,   237204.0,  -309458.0}, {  59,   236121.0,  -319399.0},
{  60,   332568.0,  -307394.0}, {  61,   342360.0,  -305362.0}, {  62,   335704.0,  -297898.0}, {  63,   348531.0,  -293159.0},
{  64,   338740.0,  -295191.0}, {  65,   345396.0,  -302654.0}, {  66,  -314235.0,  -312499.0}, {  67,  -320231.0,  -320502.0},
{  68,  -310302.0,  -321693.0}, {  69,  -316785.0,  -333764.0}, {  70,  -310790.0,  -325760.0}, {  71,  -320718.0,  -324570.0},
{  72,  -236716.0,  -283779.0}, {  73,  -226756.0,  -284674.0}, {  74,  -230961.0,  -275601.0}, {  75,  -217004.0,  -274644.0},
{  76,  -226964.0,  -273749.0}, {  77,  -222759.0,  -282822.0}, {  78,   -95076.6,  -254502.0}, {  79,   -88372.5,  -261922.0},
{  80,   -85298.8,  -252406.0}, {  81,   -74723.6,  -261076.0}, {  82,   -81427.8,  -253656.0}, {  83,   -84501.5,  -263172.0},
{  84,    11736.5,  -242402.0}, {  85,    21592.7,  -244091.0}, {  86,    18127.9,  -234711.0}, {  87,    31868.3,  -234966.0},
{  88,    22012.1,  -233276.0}, {  89,    25476.8,  -242657.0}, {  90,   155268.0,  -197662.0}, {  91,   163290.0,  -203632.0},
{  92,   164449.0,  -193700.0}, {  93,   176547.0,  -200146.0}, {  94,   168525.0,  -194175.0}, {  95,   167365.0,  -204108.0},
{  96,   265894.0,  -246177.0}, {  97,   264300.0,  -236305.0}, {  98,   256548.0,  -242621.0}, {  99,   252401.0,  -229615.0},
{ 100,   253994.0,  -239487.0}, { 101,   261747.0,  -233171.0}, { 102,   397326.0,  -229041.0}, { 103,   392768.0,  -220140.0},
{ 104,   387339.0,  -228538.0}, { 105,   378889.0,  -217122.0}, { 106,   383447.0,  -226022.0}, { 107,   388876.0,  -217624.0},
{ 108,  -442696.0,  -211696.0}, { 109,  -432816.0,  -210150.0}, { 110,  -439095.0,  -202367.0}, { 111,  -426049.0,  -198266.0},
{ 112,  -435929.0,  -199812.0}, { 113,  -429650.0,  -207595.0}, { 114,  -277154.0,  -183766.0}, { 115,  -277994.0,  -193731.0},
{ 116,  -268945.0,  -189476.0}, { 117,  -268141.0,  -202936.0}, { 118,  -267301.0,  -192971.0}, { 119,  -276351.0,  -197226.0},
{ 120,  -154246.0,  -163824.0}, { 121,  -155035.0,  -173793.0}, { 122,  -146007.0,  -169492.0}, { 123,  -145050.0,  -183129.0},
{ 124,  -144260.0,  -173160.0}, { 125,  -153288.0,  -177460.0}, { 126,   -40110.8,  -138782.0}, { 127,   -36890.3,  -148250.0},
{ 128,   -30301.7,  -140727.0}, { 129,   -23934.4,  -152950.0}, { 130,   -27154.9,  -143483.0}, { 131,   -33743.5,  -151006.0},
{ 132,    70781.0,  -117930.0}, { 133,    77850.0,  -125003.0}, { 134,    80441.1,  -115345.0}, { 135,    91308.7,  -123437.0},
{ 136,    84239.7,  -116364.0}, { 137,    81648.7,  -126023.0}, { 138,   175043.0,  -112713.0}, { 139,   184916.0,  -111130.0},
{ 140,   178608.0,  -103371.0}, { 141,   191382.0,   -99429.1}, { 142,   181508.0,  -101013.0}, { 143,   187817.0,  -108772.0},
{ 144,   318996.0,  -132066.0}, { 145,   314466.0,  -123151.0}, { 146,   309010.0,  -131531.0}, { 147,   300679.0,  -120141.0},
{ 148,   305209.0,  -129056.0}, { 149,   310665.0,  -120676.0}, { 150,   477560.0,   -75704.0}, { 151,   468694.0,   -80329.9},
{ 152,   477133.0,   -85694.9}, { 153,   465815.0,   -94178.5}, { 154,   474681.0,   -89552.6}, { 155,   466242.0,   -84187.6},
{ 156,  -507619.0,  -101473.0}, { 157,  -499081.0,  -106679.0}, { 158,  -498842.0,   -96681.6}, { 159,  -486231.0,  -101984.0},
{ 160,  -494769.0,   -96778.8}, { 161,  -495008.0,  -106776.0}, { 162,  -356159.0,   -86457.1}, { 163,  -357161.0,   -96406.8},
{ 164,  -348043.0,   -92299.8}, { 165,  -347416.0,  -105865.0}, { 166,  -346414.0,   -95915.7}, { 167,  -355532.0,  -100023.0},
{ 168,  -232844.0,   -66806.9}, { 169,  -233483.0,   -76786.5}, { 170,  -224521.0,   -72350.3}, { 171,  -223036.0,   -86620.6},
{ 172,  -222397.0,   -76641.0}, { 173,  -231359.0,   -81077.1}, { 174,  -141335.0,   -45085.9}, { 175,  -132021.0,   -48724.4},
{ 176,  -133527.0,   -38838.5}, { 177,  -120010.0,   -41836.6}, { 178,  -129325.0,   -38198.1}, { 179,  -127818.0,   -48084.0},
{ 180,    -6737.6,   -73380.5}, { 181,   -11904.5,   -64818.8}, { 182,   -16735.7,   -73574.4}, { 183,   -25102.6,   -63247.0},
{ 184,   -19935.7,   -71808.7}, { 185,   -15104.5,   -63053.1}, { 186,   104672.0,   -49147.9}, { 187,   104179.0,   -39160.1},
{ 188,    95775.9,   -44580.8}, { 189,    92987.7,   -31034.6}, { 190,    93480.5,   -41022.4}, { 191,   101884.0,   -35601.7},
{ 192,   269689.0,   -12033.5}, { 193,   261034.0,   -17041.8}, { 194,   269699.0,   -22033.5}, { 195,   258965.0,   -30649.0},
{ 196,   267621.0,   -25640.7}, { 197,   258956.0,   -20649.0}, { 198,   388834.0,    -4415.2}, { 199,   379974.0,    -9052.0},
{ 200,   388419.0,   -14406.6}, { 201,   377246.0,   -22692.3}, { 202,   386106.0,   -18055.5}, { 203,   377660.0,   -12700.9},
{ 204,   486461.0,     5001.6}, { 205,   481206.0,    13509.7}, { 206,   476465.0,     4705.0}, { 207,   467714.0,    15096.0},
{ 208,   472969.0,     6587.8}, { 209,   477710.0,    15392.5}, { 210,  -558650.0,    -8937.9}, { 211,  -559151.0,   -18925.3},
{ 212,  -550251.0,   -14365.5}, { 213,  -548820.0,   -28124.6}, { 214,  -548319.0,   -18137.2}, { 215,  -557219.0,   -22697.0},
{ 216,  -435411.0,    10216.4}, { 217,  -435891.0,      227.9}, { 218,  -427001.0,     4807.1}, { 219,  -425689.0,    -8658.9},
{ 220,  -425210.0,     1329.7}, { 221,  -434099.0,    -3249.5}, { 222,  -311966.0,    30598.1}, { 223,  -312784.0,    20631.6},
{ 224,  -303743.0,    24906.5}, { 225,  -302539.0,    10664.4}, { 226,  -301722.0,    20630.9}, { 227,  -310762.0,    16356.0},
{ 228,  -178570.0,    30401.0}, { 229,  -186410.0,    24192.6}, { 230,  -177113.0,    20507.7}, { 231,  -186325.0,    10836.5},
{ 232,  -178486.0,    17045.0}, { 233,  -187782.0,    20729.8}, { 234,   -87704.6,    23843.2}, { 235,   -91777.8,    32976.0},
{ 236,   -97650.5,    24882.1}, { 237,  -105031.0,    36414.3}, { 238,  -100957.0,    27281.5}, { 239,   -95084.8,    35375.4},
{ 240,    24699.5,    48427.4}, { 241,    25308.0,    58408.8}, { 242,    16359.6,    53945.1}, { 243,    15270.2,    67330.1},
{ 244,    14661.7,    57348.7}, { 245,    23610.2,    61812.5}, { 246,   124846.0,    95720.9}, { 247,   127608.0,   105332.0},
{ 248,   117903.0,   102918.0}, { 249,   119654.0,   116597.0}, { 250,   116892.0,   106986.0}, { 251,   126596.0,   109399.0},
{ 252,   321097.0,   135160.0}, { 253,   316465.0,   144022.0}, { 254,   311106.0,   135579.0}, { 255,   302943.0,   146683.0},
{ 256,   307575.0,   137820.0}, { 257,   312934.0,   146263.0}, { 258,   445061.0,   129407.0}, { 259,   441523.0,   120053.0},
{ 260,   451392.0,   121666.0}, { 261,   448468.0,   108556.0}, { 262,   452006.0,   117909.0}, { 263,   442137.0,   116296.0},
{ 264,   559151.0,   138215.0}, { 265,   549407.0,   135969.0}, { 266,   556224.0,   128653.0}, { 267,   543293.0,   123438.0},
{ 268,   553038.0,   125684.0}, { 269,   546221.0,   133000.0}, { 270,  -505287.0,    94053.6}, { 271,  -511419.0,    86154.1},
{ 272,  -501512.0,    84793.6}, { 273,  -508278.0,    72273.9}, { 274,  -502146.0,    80173.4}, { 275,  -512053.0,    81533.9},
{ 276,  -381676.0,   113128.0}, { 277,  -387816.0,   105235.0}, { 278,  -377911.0,   103864.0}, { 279,  -384534.0,    92479.8},
{ 280,  -378394.0,   100373.0}, { 281,  -388300.0,   101744.0}, { 282,  -258076.0,   131356.0}, { 283,  -264828.0,   123980.0},
{ 284,  -255064.0,   121821.0}, { 285,  -262589.0,   110946.0}, { 286,  -255837.0,   118323.0}, { 287,  -265601.0,   120482.0},
{ 288,  -166427.0,   119763.0}, { 289,  -170202.0,   129024.0}, { 290,  -176334.0,   121124.0}, { 291,  -183193.0,   132779.0},
{ 292,  -179418.0,   123519.0}, { 293,  -173286.0,   131418.0}, { 294,   -22326.3,   143541.0}, { 295,   -31784.9,   146787.0},
{ 296,   -29866.6,   136973.0}, { 297,   -43583.9,   139386.0}, { 298,   -34125.3,   136140.0}, { 299,   -36043.7,   145955.0},
{ 300,    89402.8,   159943.0}, { 301,    82385.1,   167067.0}, { 302,    79724.3,   157427.0}, { 303,    69197.0,   165520.0},
{ 304,    76214.7,   158396.0}, { 305,    78875.5,   168035.0}, { 306,   204009.0,   177701.0}, { 307,   200414.0,   187032.0},
{ 308,   194130.0,   179253.0}, { 309,   187481.0,   191052.0}, { 310,   191076.0,   181720.0}, { 311,   197360.0,   189499.0},
{ 312,   356002.0,   210583.0}, { 313,   346036.0,   209758.0}, { 314,   351734.0,   201540.0}, { 315,   338948.0,   198759.0},
{ 316,   348914.0,   199585.0}, { 317,   343216.0,   207803.0}, { 318,   480510.0,   231959.0}, { 319,   470631.0,   230412.0},
{ 320,   476911.0,   222630.0}, { 321,   463909.0,   218563.0}, { 322,   473789.0,   220111.0}, { 323,   467509.0,   227893.0},
{ 324,  -467508.0,   223568.0}, { 325,  -468951.0,   213673.0}, { 326,  -459660.0,   217371.0}, { 327,  -459597.0,   203695.0},
{ 328,  -458155.0,   213590.0}, { 329,  -467446.0,   209892.0}, { 330,  -335707.0,   224816.0}, { 331,  -343687.0,   218789.0},
{ 332,  -334478.0,   214891.0}, { 333,  -343903.0,   205452.0}, { 334,  -335923.0,   211478.0}, { 335,  -345132.0,   215376.0},
{ 336,  -246474.0,   218063.0}, { 337,  -249947.0,   227440.0}, { 338,  -256332.0,   219743.0}, { 339,  -262866.0,   231660.0},
{ 340,  -259393.0,   222282.0}, { 341,  -253009.0,   229979.0}, { 342,   -97202.6,   244599.0}, { 343,  -107087.0,   246116.0},
{ 344,  -103459.0,   236797.0}, { 345,  -116143.0,   237224.0}, { 346,  -106258.0,   235707.0}, { 347,  -109887.0,   245025.0},
{ 348,    21248.2,   260067.0}, { 349,    11947.1,   263740.0}, { 350,    13416.9,   253849.0}, { 351,      371.6,   256965.0},
{ 352,     9672.7,   253292.0}, { 353,     8202.9,   263184.0}, { 354,   105153.0,   284013.0}, { 355,   108944.0,   293266.0},
{ 356,    99034.8,   291922.0}, { 357,   102341.0,   304745.0}, { 358,    98550.7,   295491.0}, { 359,   108460.0,   296835.0},
{ 360,   275671.0,   306680.0}, { 361,   265672.0,   306521.0}, { 362,   270809.0,   297941.0}, { 363,   258399.0,   296338.0},
{ 364,   268398.0,   296497.0}, { 365,   263260.0,   305077.0}, { 366,   396598.0,   321875.0}, { 367,   386853.0,   324119.0},
{ 368,   389782.0,   314557.0}, { 369,   376287.0,   315653.0}, { 370,   386032.0,   313409.0}, { 371,   383103.0,   322970.0},
{ 372,  -447993.0,   295648.0}, { 373,  -452192.0,   304724.0}, { 374,  -457952.0,   296549.0}, { 375,  -464812.0,   307499.0},
{ 376,  -460613.0,   298424.0}, { 377,  -454853.0,   306598.0}, { 378,  -324131.0,   314630.0}, { 379,  -328391.0,   323677.0},
{ 380,  -334096.0,   315464.0}, { 381,  -341244.0,   326518.0}, { 382,  -336984.0,   317470.0}, { 383,  -331279.0,   325683.0},
{ 384,  -206906.0,   336836.0}, { 385,  -208812.0,   346652.0}, { 386,  -216360.0,   340093.0}, { 387,  -220709.0,   352722.0},
{ 388,  -218803.0,   342905.0}, { 389,  -211255.0,   349464.0}, { 390,   -56263.7,   358603.0}, { 391,   -65968.2,   361017.0},
{ 392,   -63206.0,   351406.0}, { 393,   -76686.5,   352734.0}, { 394,   -66982.1,   350321.0}, { 395,   -69744.3,   359932.0},
{ 396,    78212.6,   391918.0}, { 397,    68658.1,   388966.0}, { 398,    75991.5,   382167.0}, { 399,    63497.2,   376045.0},
{ 400,    73051.7,   378996.0}, { 401,    65718.3,   385795.0}, { 402,   162073.0,   395086.0}, { 403,   161108.0,   405039.0},
{ 404,   152971.0,   399226.0}, { 405,   149446.0,   412762.0}, { 406,   150412.0,   402808.0}, { 407,   158549.0,   408621.0},
{ 408,   324660.0,   421300.0}, { 409,   314750.0,   419959.0}, { 410,   320867.0,   412047.0}, { 411,   308295.0,   408647.0},
{ 412,   318204.0,   409989.0}, { 413,   312088.0,   417900.0}, { 414,  -396330.0,   406446.0}, { 415,  -403070.0,   413833.0},
{ 416,  -406098.0,   404303.0}, { 417,  -415975.0,   412687.0}, { 418,  -409235.0,   405299.0}, { 419,  -406207.0,   414830.0},
{ 420,  -287750.0,   435378.0}, { 421,  -288677.0,   445335.0}, { 422,  -296836.0,   439553.0}, { 423,  -300176.0,   452915.0},
{ 424,  -299248.0,   442958.0}, { 425,  -291089.0,   448739.0}, { 426,  -131528.0,   457524.0}, { 427,  -141394.0,   459159.0},
{ 428,  -137876.0,   449798.0}, { 429,  -151732.0,   449933.0}, { 430,  -141867.0,   448299.0}, { 431,  -145384.0,   457660.0},
{ 432,   -44704.1,   476144.0}, { 433,   -43782.2,   486101.0}, { 434,   -52866.5,   481921.0}, { 435,   -53661.1,   495609.0},
{ 436,   -54583.0,   485651.0}, { 437,   -45498.7,   489831.0}, { 438,  -650000.0,  -550000.0}, { 439,   650000.0,   550000.0},
{ 440,  -650000.0,  -450000.0}, { 441,   650000.0,   450000.0}, { 442,  -650000.0,  -350000.0}, { 443,   650000.0,   350000.0},
{ 444,  -650000.0,  -250000.0}, { 445,   650000.0,   250000.0}, { 446,  -650000.0,  -150000.0}, { 447,   650000.0,   150000.0},
{ 448,  -650000.0,   -50000.0}, { 449,   650000.0,    50000.0}, { 450,  -650000.0,    50000.0}, { 451,   650000.0,   -50000.0},
{ 452,  -650000.0,   150000.0}, { 453,   650000.0,  -150000.0}, { 454,  -650000.0,   250000.0}, { 455,   650000.0,  -250000.0},
{ 456,  -650000.0,   350000.0}, { 457,   650000.0,  -350000.0}, { 458,  -650000.0,   450000.0}, { 459,   650000.0,  -450000.0},
{ 460,  -650000.0,   550000.0}, { 461,   650000.0,  -550000.0}, { 462,  -550000.0,   550000.0}, { 463,   550000.0,  -550000.0},
{ 464,  -450000.0,   550000.0}, { 465,   450000.0,  -550000.0}, { 466,  -350000.0,   550000.0}, { 467,   350000.0,  -550000.0},
{ 468,  -250000.0,   550000.0}, { 469,   250000.0,  -550000.0}, { 470,  -150000.0,   550000.0}, { 471,   150000.0,  -550000.0},
{ 472,   -50000.0,   550000.0}, { 473,    50000.0,  -550000.0}, { 474,    50000.0,   550000.0}, { 475,   -50000.0,  -550000.0},
{ 476,   150000.0,   550000.0}, { 477,  -150000.0,  -550000.0}, { 478,   250000.0,   550000.0}, { 479,  -250000.0,  -550000.0},
{ 480,   350000.0,   550000.0}, { 481,  -350000.0,  -550000.0}, { 482,   450000.0,   550000.0}, { 483,  -450000.0,  -550000.0},
{ 484,   550000.0,   550000.0}, { 485,  -550000.0,  -550000.0}
};

int triangles[922][3] = {
  {  0,   1,   2}, {  0,   1, 479}, {  0,   2,  35}, {  0,  30,  31}, {  0,  30, 479}, {  0,  31,  35},
  {  1,   2,   4}, {  1,   4,   5}, {  1,   5, 477}, {  1, 477, 479}, {  2,   4,  36}, {  2,  33,  35},
  {  2,  33,  36}, {  3,   4,   5}, {  3,   4,  37}, {  3,   5, 477}, {  3,   6,   8}, {  3,   6, 477},
  {  3,   8,  41}, {  3,  37,  41}, {  4,  36,  37}, {  6,   7,   8}, {  6,   7, 475}, {  6, 475, 477},
  {  7,   8,  10}, {  7,  10,  11}, {  7,  11, 475}, {  8,  10,  39}, {  8,  39,  41}, {  9,  10,  11},
  {  9,  10,  39}, {  9,  11, 475}, {  9,  12,  43}, {  9,  12, 475}, {  9,  39,  42}, {  9,  42,  43},
  { 12,  13,  14}, { 12,  13, 473}, { 12,  14,  47}, { 12,  43,  47}, { 12, 473, 475}, { 13,  14,  17},
  { 13,  17, 473}, { 14,  16,  17}, { 14,  16,  48}, { 14,  45,  47}, { 14,  45,  50}, { 14,  48,  50},
  { 15,  16,  17}, { 15,  16,  48}, { 15,  17, 471}, { 15,  18,  20}, { 15,  18, 471}, { 15,  20,  48},
  { 17, 471, 473}, { 18,  19,  20}, { 18,  19, 471}, { 19,  20,  23}, { 19,  23, 469}, { 19, 469, 471},
  { 20,  22,  23}, { 20,  22,  48}, { 21,  22,  23}, { 21,  22,  49}, { 21,  23,  24}, { 21,  24,  59},
  { 21,  49,  54}, { 21,  54,  55}, { 21,  55,  59}, { 22,  48,  49}, { 23,  24, 469}, { 24,  25,  26},
  { 24,  25, 469}, { 24,  26,  57}, { 24,  57,  59}, { 25,  26,  29}, { 25,  29, 467}, { 25, 467, 469},
  { 26,  28,  29}, { 26,  28,  60}, { 26,  57,  60}, { 27,  28,  29}, { 27,  28,  60}, { 27,  29, 467},
  { 27,  60,  61}, { 27,  61,  65}, { 27,  65, 465}, { 27, 465, 467}, { 30,  31,  32}, { 30,  32,  69},
  { 30,  69, 483}, { 30, 479, 481}, { 30, 481, 483}, { 31,  32,  35}, { 32,  34,  35}, { 32,  34,  69},
  { 33,  34,  35}, { 33,  34,  69}, { 33,  36,  73}, { 33,  69,  70}, { 33,  70,  72}, { 33,  72,  73},
  { 36,  37,  38}, { 36,  38,  75}, { 36,  73,  77}, { 36,  75,  77}, { 37,  38,  41}, { 38,  40,  41},
  { 38,  40,  79}, { 38,  75,  78}, { 38,  78,  79}, { 39,  40,  41}, { 39,  40,  42}, { 40,  42,  83},
  { 40,  79,  83}, { 42,  43,  44}, { 42,  44,  81}, { 42,  81,  83}, { 43,  44,  46}, { 43,  46,  47},
  { 44,  46,  81}, { 45,  46,  47}, { 45,  46,  84}, { 45,  50,  52}, { 45,  51,  52}, { 45,  51,  85},
  { 45,  84,  85}, { 46,  81,  84}, { 48,  49,  50}, { 49,  50,  52}, { 49,  52,  53}, { 49,  53,  54},
  { 51,  52,  53}, { 51,  53,  54}, { 51,  54,  91}, { 51,  85,  89}, { 51,  87,  89}, { 51,  87,  91},
  { 54,  55,  56}, { 54,  56, 100}, { 54,  91,  95}, { 54,  95, 100}, { 55,  56,  59}, { 56,  58,  59},
  { 56,  58,  98}, { 56,  98, 100}, { 57,  58,  59}, { 57,  58,  96}, { 57,  60,  96}, { 58,  96,  98},
  { 60,  61,  62}, { 60,  62,  96}, { 61,  62,  65}, { 62,  64,  65}, { 62,  64,  96}, { 63,  64,  65},
  { 63,  64, 105}, { 63,  65, 102}, { 63, 102, 104}, { 63, 104, 106}, { 63, 105, 106}, { 64,  96, 105},
  { 65, 102, 457}, { 65, 457, 465}, { 66,  67,  68}, { 66,  67, 113}, { 66,  68,  72}, { 66,  72, 117},
  { 66, 113, 119}, { 66, 117, 119}, { 67,  68,  71}, { 67,  71, 109}, { 67, 109, 113}, { 68,  70,  71},
  { 68,  70,  72}, { 69,  70,  71}, { 69,  71, 483}, { 71, 108, 109}, { 71, 108, 442}, { 71, 442, 483},
  { 72,  73,  74}, { 72,  74, 117}, { 73,  74,  77}, { 74,  76,  77}, { 74,  76, 117}, { 75,  76,  77},
  { 75,  76, 117}, { 75,  78, 123}, { 75, 117, 125}, { 75, 123, 125}, { 78,  79,  80}, { 78,  80, 123},
  { 79,  80,  82}, { 79,  82,  83}, { 80,  82, 131}, { 80, 123, 127}, { 80, 127, 131}, { 81,  82,  83},
  { 81,  82,  84}, { 82,  84, 129}, { 82, 129, 131}, { 84,  85,  86}, { 84,  86, 129}, { 85,  86,  88},
  { 85,  88,  89}, { 86,  88, 129}, { 87,  88,  89}, { 87,  88, 133}, { 87,  90,  91}, { 87,  90, 137},
  { 87, 133, 137}, { 88, 129, 133}, { 90,  91,  92}, { 90,  92, 138}, { 90, 135, 137}, { 90, 135, 138},
  { 91,  92,  95}, { 92,  94,  95}, { 92,  94, 138}, { 93,  94,  95}, { 93,  94, 139}, { 93,  95, 100},
  { 93,  99, 100}, { 93,  99, 143}, { 93, 139, 143}, { 94, 138, 139}, { 96,  97,  98}, { 96,  97, 105},
  { 97,  98, 100}, { 97, 100, 101}, { 97, 101, 144}, { 97, 105, 144}, { 99, 100, 101}, { 99, 101, 146},
  { 99, 143, 148}, { 99, 146, 148}, {101, 144, 146}, {102, 103, 104}, {102, 103, 153}, {102, 153, 455},
  {102, 455, 457}, {103, 104, 107}, {103, 107, 153}, {104, 106, 107}, {105, 106, 107}, {105, 107, 144},
  {107, 144, 153}, {108, 109, 110}, {108, 110, 157}, {108, 157, 444}, {108, 442, 444}, {109, 110, 113},
  {110, 112, 113}, {110, 112, 161}, {110, 157, 161}, {111, 112, 113}, {111, 112, 159}, {111, 113, 119},
  {111, 114, 115}, {111, 114, 165}, {111, 115, 119}, {111, 159, 167}, {111, 165, 167}, {112, 159, 161},
  {114, 115, 116}, {114, 116, 171}, {114, 165, 173}, {114, 171, 173}, {115, 116, 118}, {115, 118, 119},
  {116, 118, 121}, {116, 120, 121}, {116, 120, 171}, {117, 118, 119}, {117, 118, 125}, {118, 121, 125},
  {120, 121, 122}, {120, 122, 179}, {120, 171, 174}, {120, 174, 175}, {120, 175, 179}, {121, 122, 125},
  {122, 124, 125}, {122, 124, 126}, {122, 126, 179}, {123, 124, 125}, {123, 124, 127}, {124, 126, 127},
  {126, 127, 128}, {126, 128, 182}, {126, 177, 179}, {126, 177, 183}, {126, 182, 184}, {126, 183, 184},
  {127, 128, 131}, {128, 130, 131}, {128, 130, 180}, {128, 180, 182}, {129, 130, 131}, {129, 130, 132},
  {129, 132, 133}, {130, 132, 180}, {132, 133, 134}, {132, 134, 188}, {132, 180, 190}, {132, 188, 190},
  {133, 134, 137}, {134, 136, 137}, {134, 136, 186}, {134, 186, 188}, {135, 136, 137}, {135, 136, 186},
  {135, 138, 186}, {138, 139, 140}, {138, 140, 186}, {139, 140, 143}, {140, 142, 143}, {140, 142, 186},
  {141, 142, 143}, {141, 142, 187}, {141, 143, 147}, {141, 147, 195}, {141, 187, 197}, {141, 195, 197},
  {142, 186, 187}, {143, 147, 148}, {144, 145, 146}, {144, 145, 201}, {144, 153, 201}, {145, 146, 149},
  {145, 149, 201}, {146, 148, 149}, {147, 148, 149}, {147, 149, 196}, {147, 195, 196}, {149, 196, 201},
  {150, 151, 152}, {150, 151, 208}, {150, 152, 451}, {150, 204, 206}, {150, 204, 451}, {150, 206, 208},
  {151, 152, 154}, {151, 154, 155}, {151, 155, 202}, {151, 200, 202}, {151, 200, 208}, {152, 154, 453},
  {152, 451, 453}, {153, 154, 155}, {153, 154, 455}, {153, 155, 201}, {154, 453, 455}, {155, 201, 202},
  {156, 157, 158}, {156, 157, 446}, {156, 158, 213}, {156, 213, 448}, {156, 446, 448}, {157, 158, 161},
  {157, 444, 446}, {158, 160, 161}, {158, 160, 213}, {159, 160, 161}, {159, 160, 221}, {159, 162, 163},
  {159, 162, 219}, {159, 163, 167}, {159, 219, 221}, {160, 213, 221}, {162, 163, 164}, {162, 164, 225},
  {162, 219, 227}, {162, 225, 227}, {163, 164, 167}, {164, 166, 167}, {164, 166, 169}, {164, 168, 169},
  {164, 168, 225}, {165, 166, 167}, {165, 166, 173}, {166, 169, 173}, {168, 169, 170}, {168, 170, 231},
  {168, 225, 231}, {169, 170, 172}, {169, 172, 173}, {170, 172, 174}, {170, 174, 231}, {171, 172, 173},
  {171, 172, 174}, {174, 175, 176}, {174, 176, 232}, {174, 231, 232}, {175, 176, 179}, {176, 178, 179},
  {176, 178, 230}, {176, 230, 232}, {177, 178, 179}, {177, 178, 236}, {177, 183, 234}, {177, 234, 236},
  {178, 230, 238}, {178, 236, 238}, {180, 181, 182}, {180, 181, 190}, {181, 182, 184}, {181, 184, 185},
  {181, 185, 240}, {181, 189, 190}, {181, 189, 240}, {183, 184, 185}, {183, 185, 242}, {183, 234, 242},
  {185, 240, 242}, {186, 187, 188}, {187, 188, 191}, {187, 191, 197}, {188, 190, 191}, {189, 190, 191},
  {189, 191, 246}, {189, 240, 246}, {191, 197, 246}, {192, 193, 194}, {192, 193, 246}, {192, 194, 201},
  {192, 199, 203}, {192, 199, 252}, {192, 201, 203}, {192, 246, 247}, {192, 247, 306}, {192, 252, 254},
  {192, 254, 256}, {192, 256, 306}, {193, 194, 196}, {193, 196, 197}, {193, 197, 246}, {194, 196, 201},
  {195, 196, 197}, {198, 199, 200}, {198, 199, 252}, {198, 200, 207}, {198, 207, 261}, {198, 252, 263},
  {198, 261, 263}, {199, 200, 202}, {199, 202, 203}, {200, 207, 208}, {201, 202, 203}, {204, 205, 206},
  {204, 205, 267}, {204, 267, 449}, {204, 449, 451}, {205, 206, 209}, {205, 209, 267}, {206, 208, 209},
  {207, 208, 209}, {207, 209, 261}, {209, 261, 267}, {210, 211, 212}, {210, 211, 448}, {210, 212, 273},
  {210, 273, 275}, {210, 275, 450}, {210, 448, 450}, {211, 212, 214}, {211, 214, 215}, {211, 215, 448},
  {212, 214, 216}, {212, 216, 273}, {213, 214, 215}, {213, 214, 217}, {213, 215, 448}, {213, 217, 221},
  {214, 216, 217}, {216, 217, 218}, {216, 218, 279}, {216, 273, 274}, {216, 274, 279}, {217, 218, 221},
  {218, 220, 221}, {218, 220, 222}, {218, 222, 279}, {219, 220, 221}, {219, 220, 223}, {219, 223, 227},
  {220, 222, 223}, {222, 223, 224}, {222, 224, 285}, {222, 279, 280}, {222, 280, 285}, {223, 224, 226},
  {223, 226, 227}, {224, 226, 285}, {225, 226, 227}, {225, 226, 233}, {225, 231, 233}, {226, 229, 233},
  {226, 229, 285}, {228, 229, 230}, {228, 229, 285}, {228, 230, 237}, {228, 237, 288}, {228, 285, 286},
  {228, 286, 292}, {228, 288, 290}, {228, 290, 292}, {229, 230, 232}, {229, 232, 233}, {230, 237, 238},
  {231, 232, 233}, {234, 235, 236}, {234, 235, 244}, {234, 242, 244}, {235, 236, 238}, {235, 238, 239},
  {235, 239, 297}, {235, 243, 244}, {235, 243, 298}, {235, 297, 298}, {237, 238, 239}, {237, 239, 297},
  {237, 288, 297}, {240, 241, 242}, {240, 241, 246}, {241, 242, 244}, {241, 244, 245}, {241, 245, 248},
  {241, 246, 248}, {243, 244, 245}, {243, 245, 304}, {243, 294, 296}, {243, 294, 303}, {243, 296, 298},
  {243, 303, 304}, {245, 248, 250}, {245, 250, 304}, {246, 247, 248}, {247, 248, 251}, {247, 251, 308},
  {247, 306, 308}, {248, 250, 251}, {249, 250, 251}, {249, 250, 302}, {249, 251, 310}, {249, 300, 302},
  {249, 300, 310}, {250, 302, 304}, {251, 308, 310}, {252, 253, 254}, {252, 253, 316}, {252, 259, 263},
  {252, 259, 316}, {253, 254, 257}, {253, 257, 315}, {253, 315, 316}, {254, 256, 257}, {255, 256, 257},
  {255, 256, 306}, {255, 257, 315}, {255, 306, 307}, {255, 307, 315}, {258, 259, 260}, {258, 259, 316},
  {258, 260, 269}, {258, 269, 322}, {258, 312, 314}, {258, 312, 321}, {258, 314, 316}, {258, 321, 322},
  {259, 260, 262}, {259, 262, 263}, {260, 262, 267}, {260, 267, 269}, {261, 262, 263}, {261, 262, 267},
  {264, 265, 266}, {264, 265, 320}, {264, 266, 447}, {264, 318, 320}, {264, 318, 445}, {264, 445, 447},
  {265, 266, 269}, {265, 269, 322}, {265, 320, 322}, {266, 268, 269}, {266, 268, 449}, {266, 447, 449},
  {267, 268, 269}, {267, 268, 449}, {270, 271, 272}, {270, 271, 452}, {270, 272, 277}, {270, 277, 327},
  {270, 327, 329}, {270, 329, 452}, {271, 272, 274}, {271, 274, 275}, {271, 275, 450}, {271, 450, 452},
  {272, 274, 279}, {272, 277, 281}, {272, 279, 281}, {273, 274, 275}, {276, 277, 278}, {276, 277, 327},
  {276, 278, 287}, {276, 283, 287}, {276, 283, 333}, {276, 327, 333}, {277, 278, 281}, {278, 280, 281},
  {278, 280, 285}, {278, 285, 287}, {279, 280, 281}, {282, 283, 284}, {282, 283, 334}, {282, 284, 291},
  {282, 291, 336}, {282, 334, 338}, {282, 336, 338}, {283, 284, 286}, {283, 286, 287}, {283, 333, 334},
  {284, 286, 292}, {284, 291, 292}, {285, 286, 287}, {288, 289, 290}, {288, 289, 297}, {289, 290, 293},
  {289, 293, 345}, {289, 297, 346}, {289, 345, 346}, {290, 292, 293}, {291, 292, 293}, {291, 293, 345},
  {291, 336, 345}, {294, 295, 296}, {294, 295, 352}, {294, 303, 352}, {295, 296, 298}, {295, 298, 299},
  {295, 299, 342}, {295, 342, 351}, {295, 351, 352}, {297, 298, 299}, {297, 299, 344}, {297, 344, 346},
  {299, 342, 344}, {300, 301, 302}, {300, 301, 309}, {300, 309, 310}, {301, 302, 304}, {301, 304, 305},
  {301, 305, 354}, {301, 309, 354}, {303, 304, 305}, {303, 305, 348}, {303, 348, 350}, {303, 350, 352},
  {305, 348, 354}, {306, 307, 308}, {307, 308, 311}, {307, 311, 363}, {307, 315, 364}, {307, 363, 364},
  {308, 310, 311}, {309, 310, 311}, {309, 311, 363}, {309, 354, 355}, {309, 355, 363}, {312, 313, 314},
  {312, 313, 369}, {312, 321, 323}, {312, 323, 370}, {312, 369, 370}, {313, 314, 316}, {313, 316, 317},
  {313, 317, 362}, {313, 360, 362}, {313, 360, 369}, {315, 316, 317}, {315, 317, 364}, {317, 362, 364},
  {318, 319, 320}, {318, 319, 366}, {318, 366, 443}, {318, 443, 445}, {319, 320, 323}, {319, 323, 368},
  {319, 366, 368}, {320, 322, 323}, {321, 322, 323}, {323, 368, 370}, {324, 325, 326}, {324, 325, 454},
  {324, 326, 372}, {324, 372, 374}, {324, 374, 376}, {324, 375, 376}, {324, 375, 454}, {325, 326, 328},
  {325, 328, 329}, {325, 329, 452}, {325, 452, 454}, {326, 328, 335}, {326, 331, 335}, {326, 331, 372},
  {327, 328, 329}, {327, 328, 333}, {328, 333, 335}, {330, 331, 332}, {330, 331, 382}, {330, 332, 339},
  {330, 339, 378}, {330, 378, 380}, {330, 380, 382}, {331, 332, 334}, {331, 334, 335}, {331, 372, 382},
  {332, 334, 340}, {332, 339, 340}, {333, 334, 335}, {334, 338, 340}, {336, 337, 338}, {336, 337, 345},
  {337, 338, 341}, {337, 341, 384}, {337, 345, 384}, {338, 340, 341}, {339, 340, 341}, {339, 341, 386},
  {339, 378, 386}, {341, 384, 386}, {342, 343, 344}, {342, 343, 393}, {342, 351, 394}, {342, 393, 394},
  {343, 344, 346}, {343, 346, 347}, {343, 347, 393}, {345, 346, 347}, {345, 347, 384}, {347, 384, 393},
  {348, 349, 350}, {348, 349, 399}, {348, 354, 356}, {348, 356, 358}, {348, 358, 399}, {349, 350, 353},
  {349, 353, 390}, {349, 390, 399}, {350, 352, 353}, {351, 352, 353}, {351, 353, 392}, {351, 392, 394},
  {353, 390, 392}, {354, 355, 356}, {355, 356, 358}, {355, 358, 359}, {355, 359, 363}, {357, 358, 359},
  {357, 358, 399}, {357, 359, 402}, {357, 398, 400}, {357, 398, 404}, {357, 399, 400}, {357, 402, 404},
  {359, 363, 402}, {360, 361, 362}, {360, 361, 411}, {360, 369, 412}, {360, 411, 412}, {361, 362, 365},
  {361, 365, 402}, {361, 402, 411}, {362, 364, 365}, {363, 364, 365}, {363, 365, 402}, {366, 367, 368},
  {366, 367, 408}, {366, 408, 482}, {366, 441, 443}, {366, 441, 484}, {366, 482, 484}, {367, 368, 371},
  {367, 371, 410}, {367, 408, 410}, {368, 370, 371}, {369, 370, 371}, {369, 371, 412}, {371, 410, 412},
  {372, 373, 374}, {372, 373, 381}, {372, 381, 382}, {373, 374, 376}, {373, 376, 377}, {373, 377, 416},
  {373, 381, 416}, {375, 376, 377}, {375, 377, 418}, {375, 417, 418}, {375, 417, 458}, {375, 454, 456},
  {375, 456, 458}, {377, 416, 418}, {378, 379, 380}, {378, 379, 387}, {378, 386, 388}, {378, 387, 388},
  {379, 380, 383}, {379, 383, 420}, {379, 387, 420}, {380, 382, 383}, {381, 382, 383}, {381, 383, 422},
  {381, 414, 416}, {381, 414, 422}, {383, 420, 422}, {384, 385, 386}, {384, 385, 393}, {385, 386, 389},
  {385, 389, 429}, {385, 393, 430}, {385, 429, 430}, {386, 388, 389}, {387, 388, 389}, {387, 389, 429},
  {387, 420, 429}, {390, 391, 392}, {390, 391, 432}, {390, 399, 401}, {390, 401, 432}, {391, 392, 394},
  {391, 394, 395}, {391, 395, 426}, {391, 426, 432}, {393, 394, 395}, {393, 395, 428}, {393, 428, 430},
  {395, 426, 428}, {396, 397, 398}, {396, 397, 474}, {396, 398, 406}, {396, 405, 406}, {396, 405, 474},
  {397, 398, 400}, {397, 400, 401}, {397, 401, 432}, {397, 432, 474}, {398, 404, 406}, {399, 400, 401},
  {402, 403, 404}, {402, 403, 411}, {403, 404, 407}, {403, 407, 413}, {403, 411, 413}, {404, 406, 407},
  {405, 406, 407}, {405, 407, 476}, {405, 474, 476}, {407, 413, 478}, {407, 476, 478}, {408, 409, 410},
  {408, 409, 480}, {408, 480, 482}, {409, 410, 413}, {409, 413, 478}, {409, 478, 480}, {410, 412, 413},
  {411, 412, 413}, {414, 415, 416}, {414, 415, 423}, {414, 422, 424}, {414, 423, 424}, {415, 416, 418},
  {415, 418, 419}, {415, 419, 466}, {415, 423, 466}, {417, 418, 419}, {417, 419, 464}, {417, 458, 462},
  {417, 462, 464}, {419, 464, 466}, {420, 421, 422}, {420, 421, 429}, {421, 422, 424}, {421, 424, 425},
  {421, 425, 468}, {421, 429, 468}, {423, 424, 425}, {423, 425, 468}, {423, 466, 468}, {426, 427, 428},
  {426, 427, 470}, {426, 432, 434}, {426, 434, 436}, {426, 435, 436}, {426, 435, 470}, {427, 428, 430},
  {427, 430, 431}, {427, 431, 470}, {429, 430, 431}, {429, 431, 468}, {431, 468, 470}, {432, 433, 434},
  {432, 433, 474}, {433, 434, 437}, {433, 437, 474}, {434, 436, 437}, {435, 436, 437}, {435, 437, 472},
  {435, 470, 472}, {437, 472, 474}, {438, 440, 485}, {439, 441, 484}, {440, 442, 485}, {442, 483, 485},
  {457, 459, 465}, {458, 460, 462}, {459, 461, 463}, {459, 463, 465}
};

}

TEST(mega_test)
{
  const size_t nPoints = 486;
  const size_t nTriangles = 922;

  IndexedPoints indexedPoints;
  indexedPoints.insert(&AllIceTopPoints::tanks[0],&AllIceTopPoints::tanks[nPoints]);

  std::vector<Vector2<double> > pts;
  for (size_t i = 0; i < nPoints; ++i) {
    pts.push_back({AllIceTopPoints::tanks[i].x, AllIceTopPoints::tanks[i].y, AllIceTopPoints::tanks[i].id});
  }

  Delaunay<double> triangulation;
  std::vector<Triangle<double> > triangles_out = triangulation.triangulate(pts);
  std::sort(triangles_out.begin(), triangles_out.end(), triangle_order<double>);

  cout << "Points" << endl;
  for (auto& p: pts) {
    cout << p.x << " " << p.y << endl;
  }
  // cout << "Triangles" << endl;
  // The following fails in Builder OS X Yosemite (no idea why, I think it should not).
  // for (auto& t: triangles_out) {
  //   const auto p1 = indexedPoints.equal_range(std::make_tuple(t.p1.x, t.p1.y));
  //   const auto p2 = indexedPoints.equal_range(std::make_tuple(t.p2.x, t.p2.y));
  //   const auto p3 = indexedPoints.equal_range(std::make_tuple(t.p3.x, t.p3.y));
  //   cout << p1.first->id << " " << p2.first->id << " " << p3.first->id << endl;
  // }

  CheckDelaunay(pts, triangles_out);
  CheckHandedness(pts, triangles_out);

  ENSURE_EQUAL(triangles_out.size(), nTriangles, "Invalid number of triangles");

}

