#include <I3Test.h>
#include <icetray/I3Logging.h>

#include <cstdlib>

using std::cout;
using std::endl;
using std::vector;

// The following defintions are
// needed by triangle.h
#ifdef SINGLE
#define REAL float
#else
#define REAL double
#endif
#define VOID int

extern "C" {
#include <g4-tankresponse/triangle/triangle.h>
}


TEST_GROUP(triangle);


namespace {

  void InitTriangulateIO(triangulateio& trio)
  {
    trio.pointlist = (REAL*) NULL;              // In / out
    trio.pointattributelist = (REAL*) NULL;     // In / out
    trio.pointmarkerlist = (int*) NULL;          // In / out
    trio.numberofpoints = 0;                    // In / out
    trio.numberofpointattributes = 0;           // In / out

    trio.trianglelist = (int*) NULL;            // In / out
    trio.triangleattributelist = (REAL*) NULL;  // In / out
    trio.trianglearealist = (REAL*) NULL;       // In only
    trio.neighborlist = (int*) NULL;            // Out only
    trio.numberoftriangles = 0;                 // In / out
    trio.numberofcorners = 0;                   // In / out
    trio.numberoftriangleattributes = 0;        // In / out

    trio.segmentlist = (int*) NULL;             // In / out
    trio.segmentmarkerlist = (int*) NULL;       // In / out
    trio.numberofsegments = 0;                  // In / out

    trio.holelist = (REAL*) NULL;               // In / pointer to array copied out
    trio.numberofholes = 0;                     // In / copied out

    trio.regionlist = (REAL*) NULL;             // In / pointer to array copied out
    trio.numberofregions = 0;                   // In / copied out

    trio.edgelist = (int*) NULL;                // Out only
    trio.edgemarkerlist = (int*) NULL;          // Not used with Voronoi diagram; out only
    trio.normlist = (REAL*) NULL;               // Used only with Voronoi diagram; out only
    trio.numberofedges = 0;                     // Out only
  };

  void FreeTriangulateMemory(triangulateio& trio)
  {
    log_trace("Free triangulate memory allocation");

    if(trio.pointlist)          free(trio.pointlist);
    if(trio.pointattributelist) free(trio.pointattributelist);
    if(trio.pointmarkerlist)    free(trio.pointmarkerlist);

    if(trio.trianglelist)          free(trio.trianglelist);
    if(trio.triangleattributelist) free(trio.triangleattributelist);
    if(trio.trianglearealist)      free(trio.trianglearealist);
    if(trio.neighborlist)          free(trio.neighborlist);

    if(trio.segmentlist)       free(trio.segmentlist);
    if(trio.segmentmarkerlist) free(trio.segmentmarkerlist);

    if(trio.holelist)   free(trio.holelist);
    if(trio.regionlist) free(trio.regionlist);

    if(trio.edgelist)       free(trio.edgelist);
    if(trio.edgemarkerlist) free(trio.edgemarkerlist);
    if(trio.normlist)       free(trio.normlist);
  };

  struct Point {
    size_t id;
    REAL x;
    REAL y;

    bool operator==(const Point& other) const
    { return id == other.id && x == other.x && y == other.y; }
  };

  struct Triangle {
    Point p1;
    Point p2;
    Point p3;

    bool operator==(const Triangle& other) const
    { return p1 == other.p1 && p2 == other.p2 && p3 == other.p3; }
  };

  inline bool triangle_order(const Triangle &t1, const Triangle &t2)
  {
    std::vector<size_t> ids_1 = {t1.p1.id, t1.p2.id, t1.p3.id};
    std::sort(ids_1.begin(), ids_1.end());
    std::vector<size_t> ids_2 = {t2.p1.id, t2.p2.id, t2.p3.id};
    std::sort(ids_2.begin(), ids_2.end());
    return (ids_1[0] == ids_2[0] && ids_1[1] == ids_2[1] && ids_1[2] < ids_2[2]) || (ids_1[0] == ids_2[0] && ids_1[1] < ids_2[1]) || (ids_1[0] < ids_2[0]);
  }

  double Square(double a) {return a*a;}

  void
  CircleCent2(const Point &pt0, const Point &pt1, const Point &pt2,
              double &x,double &y, double &r2)
  {
    const double a1 = (pt0.x+pt1.x)/2.0;
    const double a2 = (pt0.y+pt1.y)/2.0;
    const double b1 = (pt2.x+pt1.x)/2.0;
    const double b2 = (pt2.y+pt1.y)/2.0;
    const double e2 = pt0.x-pt1.x;
    const double e1 = -pt0.y+pt1.y;

    const double q2 = pt2.x-pt1.x;
    const double q1 = -pt2.y+pt1.y;

    if ( -e1*q2 + e2*q1 == 0 ) {
      x=0; y=0; r2=-1;
      return;
    }

    const double beta = (-e2*(b1-a1) + e1*(b2-a2))/( e2*q1-e1*q2);
    x = b1 + q1*beta;
    y = b2 + q2*beta;
    r2 = (pt0.x-x)*(pt0.x-x) + (pt0.y-y)*(pt0.y-y);
  }

  void CheckDelaunay(std::vector<Point> pts, std::vector<Triangle> triangles)
  {
    cout << "Checking that the triangulation is a Delaunay triangulation" << endl;
    struct FailInfo {
      unsigned int i;
      unsigned int j;
      double r2;
      double x;
      double y;
    };
    vector<FailInfo> fail;
    // loop over all triangles and check that there are no points, other than the ones in the triangle, within the circumcircle.
    for (unsigned int i = 0; i != triangles.size(); ++i) {
      double x,y,r2;
      CircleCent2(triangles[i].p1, triangles[i].p2, triangles[i].p3, x, y, r2);
      for (unsigned int j = 0; j != pts.size(); ++j) {
        if (pts[j]==triangles[i].p1 || pts[j]==triangles[i].p2 || pts[j]==triangles[i].p3)
          continue;
        const bool fail1 = Square(pts[j].x - x) + Square(pts[j].y - y) - r2 < 0;
        if (fail1) {
          fail.push_back({i, j, r2, x, y});
        }
      }
    }
    if (fail.size()>0) {
      cout << "Triangles failing Delaunay test:" << endl;
      for (unsigned int i = 0; i != fail.size(); ++i) {
        cout << "point " << fail[i].j << " in circumcircle of "
             << triangles[fail[i].i].p1.id << ", " << triangles[fail[i].i].p2.id << ", " << triangles[fail[i].i].p3.id << endl;
        cout << "    (" <<  pts[fail[i].j].x << " - " << fail[i].x << ")^2 + (" << pts[fail[i].j].y << " - " << fail[i].y << ")^2 = "
             << Square(pts[fail[i].j].x - fail[i].x) << " + " << Square(pts[fail[i].j].y - fail[i].y) << " < " << fail[i].r2 << endl;
      }
    }
    ENSURE(fail.size()==0, "Triangulation Delaunay test.");
  }

  void CheckHandedness(std::vector<Point> pts, std::vector<Triangle> triangles) {
    cout << "Checking that all triangles have a definite handedness" << endl;
    vector<size_t> rightHanded;
    vector<size_t> leftHanded;
    vector<size_t> zero;
    for (unsigned int i = 0; i != triangles.size(); ++i) {
      const Point& p1 = triangles[i].p1;
      const Point& p2 = triangles[i].p2;
      const Point& p3 = triangles[i].p3;
      const double area = (p2.x-p1.x)*(p3.y-p1.y) - (p2.y-p1.y)*(p3.x-p1.x);
      if (area > 0) rightHanded.push_back(i);
      else if (area < 0) leftHanded.push_back(i);
      else zero.push_back(i);
    }
    cout << rightHanded.size() << " right handed triangles, "
         << leftHanded.size() << " left handed triangles, "
         << zero.size() << " empty triangles, " << endl;
    ENSURE(zero.size()==0, "Empty triangles");
    ENSURE(rightHanded.size()==triangles.size(),"Right handedness");
  }

}

triangulateio run_triangulate_test(size_t nPoints, const Point *points,
                                   int nTriangles)
{
  triangulateio in, out;
  InitTriangulateIO(in);
  InitTriangulateIO(out);

  // Define input points.
  in.numberofpoints = 3;
  in.pointlist = (REAL*)malloc(in.numberofpoints * 2 * sizeof(REAL));

  for (size_t i = 0; i < nPoints; ++i) {
    in.pointlist[2*i]   = points[i].x;
    in.pointlist[2*i+1] = points[i].y;
  }

  /**
   * Define triangulate switches:
   * (For more information see triangulate.h)
   * z: start indexing from zero (IMPORTANT!)
   * c: preserve convex hull
   * N: no boundary markers
   * Q: Quiet
   * V: Verbose
   */
  char switches[] = "zcNVQ";

  triangulate(switches, &in, &out, NULL);

  ENSURE_EQUAL(out.numberofcorners, 3, "Invalid number of triangle corners");

  ENSURE_EQUAL(out.numberoftriangles, nTriangles, "Invalid number of triangles");

  for (int i = 0; i<out.numberoftriangles; ++i) {
    log_info("%4d: (%3d, %3d, %3d)", i, out.trianglelist[3*i],
             out.trianglelist[3*i + 1], out.trianglelist[3*i + 2]);
  }

  FreeTriangulateMemory(in);

  return out;
}


TEST(primitive)
{
  static const size_t nPoints = 3;
  static const Point points[nPoints] = {
    { 0, 0, 0 },
    { 1, 2, 0 },
    { 2, 1, 1 }
  };

  triangulateio out = run_triangulate_test(nPoints, points, 1);
  FreeTriangulateMemory(out);
}

/*
TE/ST(square)
{
  // Old comment: I'd love to figure out why this takes forever
  // A possible answer: a regular square is a degenerate case which admits two valid Delaunay triangulations.
  // If there is a flipping step, one has to make sure there is no infinite loop
  static const size_t nPoints = 4;
  static const Point points[nPoints] = {
    { 0, 0, 0 },
    { 1, 1, 0 },
    { 2, 1, 1 },
    { 3, 0, 1 }
  };

  triangulateio out = run_triangulate_test(nPoints, points, 1);
  FreeTriangulateMemory(out);
}
*/

Point points[486] = {
  {   0,  -195318.0,  -491697.0}, {   1,  -186115.0,  -495609.0}, {   2,  -187330.0,  -485683.0}, {   3,  -174132.0,  -489105.0},
  {   4,  -183335.0,  -485194.0}, {   5,  -182121.0,  -495120.0}, {   6,   -81560.0,  -481194.0}, {   7,   -71634.0,  -479979.0},
  {   8,   -77648.8,  -471990.0}, {   9,   -65010.2,  -468734.0}, {  10,   -74936.2,  -469948.0}, {  11,   -68921.4,  -477937.0},
  {  12,    50756.9,  -453022.0}, {  13,    60202.9,  -456304.0}, {  14,    58322.4,  -446483.0}, {  15,    71707.9,  -449011.0},
  {  16,    62261.9,  -445728.0}, {  17,    64142.4,  -455550.0}, {  18,   162303.0,  -450441.0}, {  19,   171273.0,  -446021.0},
  {  20,   162960.0,  -440462.0}, {  21,   173886.0,  -433117.0}, {  22,   164916.0,  -437537.0}, {  23,   173229.0,  -443095.0},
  {  24,   301601.0,  -411211.0}, {  25,   310128.0,  -416435.0}, {  26,   310388.0,  -406438.0}, {  27,   322759.0,  -411761.0},
  {  28,   314232.0,  -406538.0}, {  29,   313972.0,  -416535.0}, {  30,  -284750.0,  -406346.0}, {  31,  -274965.0,  -404286.0},
  {  32,  -281642.0,  -396842.0}, {  33,  -269115.0,  -392321.0}, {  34,  -278900.0,  -394382.0}, {  35,  -272223.0,  -401826.0},
  {  36,  -139957.0,  -371318.0}, {  37,  -133078.0,  -378576.0}, {  38,  -130232.0,  -368989.0}, {  39,  -119758.0,  -377314.0},
  {  40,  -126637.0,  -370057.0}, {  41,  -129483.0,  -379643.0}, {  42,   -29679.2,  -357304.0}, {  43,   -19971.3,  -359703.0},
  {  44,   -22747.4,  -350096.0}, {  45,    -9156.1,  -351373.0}, {  46,   -18864.0,  -348974.0}, {  47,   -16087.8,  -358581.0},
  {  48,    87075.0,  -372339.0}, {  49,    90887.2,  -363094.0}, {  50,    80974.9,  -364415.0}, {  51,    84229.7,  -350988.0},
  {  52,    80417.5,  -360233.0}, {  53,    90329.9,  -358912.0}, {  54,   224148.0,  -313066.0}, {  55,   232216.0,  -318974.0},
  {  56,   233298.0,  -309033.0}, {  57,   245272.0,  -315366.0}, {  58,   237204.0,  -309458.0}, {  59,   236121.0,  -319399.0},
  {  60,   332568.0,  -307394.0}, {  61,   342360.0,  -305362.0}, {  62,   335704.0,  -297898.0}, {  63,   348531.0,  -293159.0},
  {  64,   338740.0,  -295191.0}, {  65,   345396.0,  -302654.0}, {  66,  -314235.0,  -312499.0}, {  67,  -320231.0,  -320502.0},
  {  68,  -310302.0,  -321693.0}, {  69,  -316785.0,  -333764.0}, {  70,  -310790.0,  -325760.0}, {  71,  -320718.0,  -324570.0},
  {  72,  -236716.0,  -283779.0}, {  73,  -226756.0,  -284674.0}, {  74,  -230961.0,  -275601.0}, {  75,  -217004.0,  -274644.0},
  {  76,  -226964.0,  -273749.0}, {  77,  -222759.0,  -282822.0}, {  78,   -95076.6,  -254502.0}, {  79,   -88372.5,  -261922.0},
  {  80,   -85298.8,  -252406.0}, {  81,   -74723.6,  -261076.0}, {  82,   -81427.8,  -253656.0}, {  83,   -84501.5,  -263172.0},
  {  84,    11736.5,  -242402.0}, {  85,    21592.7,  -244091.0}, {  86,    18127.9,  -234711.0}, {  87,    31868.3,  -234966.0},
  {  88,    22012.1,  -233276.0}, {  89,    25476.8,  -242657.0}, {  90,   155268.0,  -197662.0}, {  91,   163290.0,  -203632.0},
  {  92,   164449.0,  -193700.0}, {  93,   176547.0,  -200146.0}, {  94,   168525.0,  -194175.0}, {  95,   167365.0,  -204108.0},
  {  96,   265894.0,  -246177.0}, {  97,   264300.0,  -236305.0}, {  98,   256548.0,  -242621.0}, {  99,   252401.0,  -229615.0},
  { 100,   253994.0,  -239487.0}, { 101,   261747.0,  -233171.0}, { 102,   397326.0,  -229041.0}, { 103,   392768.0,  -220140.0},
  { 104,   387339.0,  -228538.0}, { 105,   378889.0,  -217122.0}, { 106,   383447.0,  -226022.0}, { 107,   388876.0,  -217624.0},
  { 108,  -442696.0,  -211696.0}, { 109,  -432816.0,  -210150.0}, { 110,  -439095.0,  -202367.0}, { 111,  -426049.0,  -198266.0},
  { 112,  -435929.0,  -199812.0}, { 113,  -429650.0,  -207595.0}, { 114,  -277154.0,  -183766.0}, { 115,  -277994.0,  -193731.0},
  { 116,  -268945.0,  -189476.0}, { 117,  -268141.0,  -202936.0}, { 118,  -267301.0,  -192971.0}, { 119,  -276351.0,  -197226.0},
  { 120,  -154246.0,  -163824.0}, { 121,  -155035.0,  -173793.0}, { 122,  -146007.0,  -169492.0}, { 123,  -145050.0,  -183129.0},
  { 124,  -144260.0,  -173160.0}, { 125,  -153288.0,  -177460.0}, { 126,   -40110.8,  -138782.0}, { 127,   -36890.3,  -148250.0},
  { 128,   -30301.7,  -140727.0}, { 129,   -23934.4,  -152950.0}, { 130,   -27154.9,  -143483.0}, { 131,   -33743.5,  -151006.0},
  { 132,    70781.0,  -117930.0}, { 133,    77850.0,  -125003.0}, { 134,    80441.1,  -115345.0}, { 135,    91308.7,  -123437.0},
  { 136,    84239.7,  -116364.0}, { 137,    81648.7,  -126023.0}, { 138,   175043.0,  -112713.0}, { 139,   184916.0,  -111130.0},
  { 140,   178608.0,  -103371.0}, { 141,   191382.0,   -99429.1}, { 142,   181508.0,  -101013.0}, { 143,   187817.0,  -108772.0},
  { 144,   318996.0,  -132066.0}, { 145,   314466.0,  -123151.0}, { 146,   309010.0,  -131531.0}, { 147,   300679.0,  -120141.0},
  { 148,   305209.0,  -129056.0}, { 149,   310665.0,  -120676.0}, { 150,   477560.0,   -75704.0}, { 151,   468694.0,   -80329.9},
  { 152,   477133.0,   -85694.9}, { 153,   465815.0,   -94178.5}, { 154,   474681.0,   -89552.6}, { 155,   466242.0,   -84187.6},
  { 156,  -507619.0,  -101473.0}, { 157,  -499081.0,  -106679.0}, { 158,  -498842.0,   -96681.6}, { 159,  -486231.0,  -101984.0},
  { 160,  -494769.0,   -96778.8}, { 161,  -495008.0,  -106776.0}, { 162,  -356159.0,   -86457.1}, { 163,  -357161.0,   -96406.8},
  { 164,  -348043.0,   -92299.8}, { 165,  -347416.0,  -105865.0}, { 166,  -346414.0,   -95915.7}, { 167,  -355532.0,  -100023.0},
  { 168,  -232844.0,   -66806.9}, { 169,  -233483.0,   -76786.5}, { 170,  -224521.0,   -72350.3}, { 171,  -223036.0,   -86620.6},
  { 172,  -222397.0,   -76641.0}, { 173,  -231359.0,   -81077.1}, { 174,  -141335.0,   -45085.9}, { 175,  -132021.0,   -48724.4},
  { 176,  -133527.0,   -38838.5}, { 177,  -120010.0,   -41836.6}, { 178,  -129325.0,   -38198.1}, { 179,  -127818.0,   -48084.0},
  { 180,    -6737.6,   -73380.5}, { 181,   -11904.5,   -64818.8}, { 182,   -16735.7,   -73574.4}, { 183,   -25102.6,   -63247.0},
  { 184,   -19935.7,   -71808.7}, { 185,   -15104.5,   -63053.1}, { 186,   104672.0,   -49147.9}, { 187,   104179.0,   -39160.1},
  { 188,    95775.9,   -44580.8}, { 189,    92987.7,   -31034.6}, { 190,    93480.5,   -41022.4}, { 191,   101884.0,   -35601.7},
  { 192,   269689.0,   -12033.5}, { 193,   261034.0,   -17041.8}, { 194,   269699.0,   -22033.5}, { 195,   258965.0,   -30649.0},
  { 196,   267621.0,   -25640.7}, { 197,   258956.0,   -20649.0}, { 198,   388834.0,    -4415.2}, { 199,   379974.0,    -9052.0},
  { 200,   388419.0,   -14406.6}, { 201,   377246.0,   -22692.3}, { 202,   386106.0,   -18055.5}, { 203,   377660.0,   -12700.9},
  { 204,   486461.0,     5001.6}, { 205,   481206.0,    13509.7}, { 206,   476465.0,     4705.0}, { 207,   467714.0,    15096.0},
  { 208,   472969.0,     6587.8}, { 209,   477710.0,    15392.5}, { 210,  -558650.0,    -8937.9}, { 211,  -559151.0,   -18925.3},
  { 212,  -550251.0,   -14365.5}, { 213,  -548820.0,   -28124.6}, { 214,  -548319.0,   -18137.2}, { 215,  -557219.0,   -22697.0},
  { 216,  -435411.0,    10216.4}, { 217,  -435891.0,      227.9}, { 218,  -427001.0,     4807.1}, { 219,  -425689.0,    -8658.9},
  { 220,  -425210.0,     1329.7}, { 221,  -434099.0,    -3249.5}, { 222,  -311966.0,    30598.1}, { 223,  -312784.0,    20631.6},
  { 224,  -303743.0,    24906.5}, { 225,  -302539.0,    10664.4}, { 226,  -301722.0,    20630.9}, { 227,  -310762.0,    16356.0},
  { 228,  -178570.0,    30401.0}, { 229,  -186410.0,    24192.6}, { 230,  -177113.0,    20507.7}, { 231,  -186325.0,    10836.5},
  { 232,  -178486.0,    17045.0}, { 233,  -187782.0,    20729.8}, { 234,   -87704.6,    23843.2}, { 235,   -91777.8,    32976.0},
  { 236,   -97650.5,    24882.1}, { 237,  -105031.0,    36414.3}, { 238,  -100957.0,    27281.5}, { 239,   -95084.8,    35375.4},
  { 240,    24699.5,    48427.4}, { 241,    25308.0,    58408.8}, { 242,    16359.6,    53945.1}, { 243,    15270.2,    67330.1},
  { 244,    14661.7,    57348.7}, { 245,    23610.2,    61812.5}, { 246,   124846.0,    95720.9}, { 247,   127608.0,   105332.0},
  { 248,   117903.0,   102918.0}, { 249,   119654.0,   116597.0}, { 250,   116892.0,   106986.0}, { 251,   126596.0,   109399.0},
  { 252,   321097.0,   135160.0}, { 253,   316465.0,   144022.0}, { 254,   311106.0,   135579.0}, { 255,   302943.0,   146683.0},
  { 256,   307575.0,   137820.0}, { 257,   312934.0,   146263.0}, { 258,   445061.0,   129407.0}, { 259,   441523.0,   120053.0},
  { 260,   451392.0,   121666.0}, { 261,   448468.0,   108556.0}, { 262,   452006.0,   117909.0}, { 263,   442137.0,   116296.0},
  { 264,   559151.0,   138215.0}, { 265,   549407.0,   135969.0}, { 266,   556224.0,   128653.0}, { 267,   543293.0,   123438.0},
  { 268,   553038.0,   125684.0}, { 269,   546221.0,   133000.0}, { 270,  -505287.0,    94053.6}, { 271,  -511419.0,    86154.1},
  { 272,  -501512.0,    84793.6}, { 273,  -508278.0,    72273.9}, { 274,  -502146.0,    80173.4}, { 275,  -512053.0,    81533.9},
  { 276,  -381676.0,   113128.0}, { 277,  -387816.0,   105235.0}, { 278,  -377911.0,   103864.0}, { 279,  -384534.0,    92479.8},
  { 280,  -378394.0,   100373.0}, { 281,  -388300.0,   101744.0}, { 282,  -258076.0,   131356.0}, { 283,  -264828.0,   123980.0},
  { 284,  -255064.0,   121821.0}, { 285,  -262589.0,   110946.0}, { 286,  -255837.0,   118323.0}, { 287,  -265601.0,   120482.0},
  { 288,  -166427.0,   119763.0}, { 289,  -170202.0,   129024.0}, { 290,  -176334.0,   121124.0}, { 291,  -183193.0,   132779.0},
  { 292,  -179418.0,   123519.0}, { 293,  -173286.0,   131418.0}, { 294,   -22326.3,   143541.0}, { 295,   -31784.9,   146787.0},
  { 296,   -29866.6,   136973.0}, { 297,   -43583.9,   139386.0}, { 298,   -34125.3,   136140.0}, { 299,   -36043.7,   145955.0},
  { 300,    89402.8,   159943.0}, { 301,    82385.1,   167067.0}, { 302,    79724.3,   157427.0}, { 303,    69197.0,   165520.0},
  { 304,    76214.7,   158396.0}, { 305,    78875.5,   168035.0}, { 306,   204009.0,   177701.0}, { 307,   200414.0,   187032.0},
  { 308,   194130.0,   179253.0}, { 309,   187481.0,   191052.0}, { 310,   191076.0,   181720.0}, { 311,   197360.0,   189499.0},
  { 312,   356002.0,   210583.0}, { 313,   346036.0,   209758.0}, { 314,   351734.0,   201540.0}, { 315,   338948.0,   198759.0},
  { 316,   348914.0,   199585.0}, { 317,   343216.0,   207803.0}, { 318,   480510.0,   231959.0}, { 319,   470631.0,   230412.0},
  { 320,   476911.0,   222630.0}, { 321,   463909.0,   218563.0}, { 322,   473789.0,   220111.0}, { 323,   467509.0,   227893.0},
  { 324,  -467508.0,   223568.0}, { 325,  -468951.0,   213673.0}, { 326,  -459660.0,   217371.0}, { 327,  -459597.0,   203695.0},
  { 328,  -458155.0,   213590.0}, { 329,  -467446.0,   209892.0}, { 330,  -335707.0,   224816.0}, { 331,  -343687.0,   218789.0},
  { 332,  -334478.0,   214891.0}, { 333,  -343903.0,   205452.0}, { 334,  -335923.0,   211478.0}, { 335,  -345132.0,   215376.0},
  { 336,  -246474.0,   218063.0}, { 337,  -249947.0,   227440.0}, { 338,  -256332.0,   219743.0}, { 339,  -262866.0,   231660.0},
  { 340,  -259393.0,   222282.0}, { 341,  -253009.0,   229979.0}, { 342,   -97202.6,   244599.0}, { 343,  -107087.0,   246116.0},
  { 344,  -103459.0,   236797.0}, { 345,  -116143.0,   237224.0}, { 346,  -106258.0,   235707.0}, { 347,  -109887.0,   245025.0},
  { 348,    21248.2,   260067.0}, { 349,    11947.1,   263740.0}, { 350,    13416.9,   253849.0}, { 351,      371.6,   256965.0},
  { 352,     9672.7,   253292.0}, { 353,     8202.9,   263184.0}, { 354,   105153.0,   284013.0}, { 355,   108944.0,   293266.0},
  { 356,    99034.8,   291922.0}, { 357,   102341.0,   304745.0}, { 358,    98550.7,   295491.0}, { 359,   108460.0,   296835.0},
  { 360,   275671.0,   306680.0}, { 361,   265672.0,   306521.0}, { 362,   270809.0,   297941.0}, { 363,   258399.0,   296338.0},
  { 364,   268398.0,   296497.0}, { 365,   263260.0,   305077.0}, { 366,   396598.0,   321875.0}, { 367,   386853.0,   324119.0},
  { 368,   389782.0,   314557.0}, { 369,   376287.0,   315653.0}, { 370,   386032.0,   313409.0}, { 371,   383103.0,   322970.0},
  { 372,  -447993.0,   295648.0}, { 373,  -452192.0,   304724.0}, { 374,  -457952.0,   296549.0}, { 375,  -464812.0,   307499.0},
  { 376,  -460613.0,   298424.0}, { 377,  -454853.0,   306598.0}, { 378,  -324131.0,   314630.0}, { 379,  -328391.0,   323677.0},
  { 380,  -334096.0,   315464.0}, { 381,  -341244.0,   326518.0}, { 382,  -336984.0,   317470.0}, { 383,  -331279.0,   325683.0},
  { 384,  -206906.0,   336836.0}, { 385,  -208812.0,   346652.0}, { 386,  -216360.0,   340093.0}, { 387,  -220709.0,   352722.0},
  { 388,  -218803.0,   342905.0}, { 389,  -211255.0,   349464.0}, { 390,   -56263.7,   358603.0}, { 391,   -65968.2,   361017.0},
  { 392,   -63206.0,   351406.0}, { 393,   -76686.5,   352734.0}, { 394,   -66982.1,   350321.0}, { 395,   -69744.3,   359932.0},
  { 396,    78212.6,   391918.0}, { 397,    68658.1,   388966.0}, { 398,    75991.5,   382167.0}, { 399,    63497.2,   376045.0},
  { 400,    73051.7,   378996.0}, { 401,    65718.3,   385795.0}, { 402,   162073.0,   395086.0}, { 403,   161108.0,   405039.0},
  { 404,   152971.0,   399226.0}, { 405,   149446.0,   412762.0}, { 406,   150412.0,   402808.0}, { 407,   158549.0,   408621.0},
  { 408,   324660.0,   421300.0}, { 409,   314750.0,   419959.0}, { 410,   320867.0,   412047.0}, { 411,   308295.0,   408647.0},
  { 412,   318204.0,   409989.0}, { 413,   312088.0,   417900.0}, { 414,  -396330.0,   406446.0}, { 415,  -403070.0,   413833.0},
  { 416,  -406098.0,   404303.0}, { 417,  -415975.0,   412687.0}, { 418,  -409235.0,   405299.0}, { 419,  -406207.0,   414830.0},
  { 420,  -287750.0,   435378.0}, { 421,  -288677.0,   445335.0}, { 422,  -296836.0,   439553.0}, { 423,  -300176.0,   452915.0},
  { 424,  -299248.0,   442958.0}, { 425,  -291089.0,   448739.0}, { 426,  -131528.0,   457524.0}, { 427,  -141394.0,   459159.0},
  { 428,  -137876.0,   449798.0}, { 429,  -151732.0,   449933.0}, { 430,  -141867.0,   448299.0}, { 431,  -145384.0,   457660.0},
  { 432,   -44704.1,   476144.0}, { 433,   -43782.2,   486101.0}, { 434,   -52866.5,   481921.0}, { 435,   -53661.1,   495609.0},
  { 436,   -54583.0,   485651.0}, { 437,   -45498.7,   489831.0}, { 438,  -650000.0,  -550000.0}, { 439,   650000.0,   550000.0},
  { 440,  -650000.0,  -450000.0}, { 441,   650000.0,   450000.0}, { 442,  -650000.0,  -350000.0}, { 443,   650000.0,   350000.0},
  { 444,  -650000.0,  -250000.0}, { 445,   650000.0,   250000.0}, { 446,  -650000.0,  -150000.0}, { 447,   650000.0,   150000.0},
  { 448,  -650000.0,   -50000.0}, { 449,   650000.0,    50000.0}, { 450,  -650000.0,    50000.0}, { 451,   650000.0,   -50000.0},
  { 452,  -650000.0,   150000.0}, { 453,   650000.0,  -150000.0}, { 454,  -650000.0,   250000.0}, { 455,   650000.0,  -250000.0},
  { 456,  -650000.0,   350000.0}, { 457,   650000.0,  -350000.0}, { 458,  -650000.0,   450000.0}, { 459,   650000.0,  -450000.0},
  { 460,  -650000.0,   550000.0}, { 461,   650000.0,  -550000.0}, { 462,  -550000.0,   550000.0}, { 463,   550000.0,  -550000.0},
  { 464,  -450000.0,   550000.0}, { 465,   450000.0,  -550000.0}, { 466,  -350000.0,   550000.0}, { 467,   350000.0,  -550000.0},
  { 468,  -250000.0,   550000.0}, { 469,   250000.0,  -550000.0}, { 470,  -150000.0,   550000.0}, { 471,   150000.0,  -550000.0},
  { 472,   -50000.0,   550000.0}, { 473,    50000.0,  -550000.0}, { 474,    50000.0,   550000.0}, { 475,   -50000.0,  -550000.0},
  { 476,   150000.0,   550000.0}, { 477,  -150000.0,  -550000.0}, { 478,   250000.0,   550000.0}, { 479,  -250000.0,  -550000.0},
  { 480,   350000.0,   550000.0}, { 481,  -350000.0,  -550000.0}, { 482,   450000.0,   550000.0}, { 483,  -450000.0,  -550000.0},
  { 484,   550000.0,   550000.0}, { 485,  -550000.0,  -550000.0}
};

int triangles[922][3] = {
{  0,   1,   2}, {  1,   0, 479}, {  2,  35,   0}, { 31,  30,   0}, { 30, 479,   0}, {  0,  35,  31},
{  5,   2,   1}, {  1, 477,   5}, {477,   1, 479}, {  5,   4,   2}, {  2,   4,  36}, { 35,   2,  33},
{ 36,  33,   2}, {  4,   5,   3}, {  4,   3,  37}, {  3,   5, 477}, {  6,   8,   3}, {  3, 477,   6},
{  8,  41,   3}, { 37,   3,  41}, { 37,  36,   4}, {  7,   8,   6}, {475,   7,   6}, {  6, 477, 475},
{  8,   7,  10}, { 11,  10,   7}, {  7, 475,  11}, {  8,  10,  39}, { 41,   8,  39}, {  9,  10,  11},
{ 10,   9,  39}, {  9,  11, 475}, { 43,   9,  12}, { 12,   9, 475}, {  9,  42,  39}, {  9,  43,  42},
{ 12,  13,  14}, { 13,  12, 473}, { 12,  14,  47}, { 47,  43,  12}, { 12, 475, 473}, { 17,  14,  13},
{ 13, 473,  17}, { 17,  16,  14}, { 16,  48,  14}, { 47,  14,  45}, { 50,  45,  14}, { 50,  14,  48},
{ 16,  17,  15}, { 48,  16,  15}, { 17, 471,  15}, { 18,  20,  15}, { 15, 471,  18}, { 15,  20,  48},
{471,  17, 473}, { 18,  19,  20}, { 19,  18, 471}, { 23,  20,  19}, { 23,  19, 469}, { 19, 471, 469},
{ 20,  23,  22}, { 48,  20,  22}, { 21,  22,  23}, { 22,  21,  49}, { 23,  24,  21}, { 21,  24,  59},
{ 49,  21,  54}, { 55,  54,  21}, { 55,  21,  59}, { 22,  49,  48}, {469,  24,  23}, { 26,  24,  25},
{ 25,  24, 469}, { 57,  24,  26}, { 59,  24,  57}, { 26,  25,  28}, { 28,  25,  29}, {467,  29,  25},
{ 25, 469, 467}, { 28,  60,  26}, { 60,  57,  26}, { 29,  27,  28}, { 60,  28,  27}, { 27,  29, 467},
{ 60,  27,  61}, { 65,  61,  27}, { 27, 465,  65}, { 27, 467, 465}, { 32,  30,  31}, { 69,  30,  32},
{ 30,  69, 483}, {479,  30, 481}, { 30, 483, 481}, { 35,  32,  31}, { 35,  34,  32}, { 69,  32,  34},
{ 33,  34,  35}, { 34,  33,  69}, { 36,  73,  33}, { 69,  33,  70}, { 72,  70,  33}, { 72,  33,  73},
{ 37,  38,  36}, { 36,  38,  75}, { 36,  77,  73}, { 75,  77,  36}, { 40,  38,  37}, { 37,  41,  40},
{ 38,  40,  79}, { 75,  38,  78}, { 79,  78,  38}, { 41,  39,  40}, { 39,  42,  40}, { 42,  83,  40},
{ 83,  79,  40}, { 44,  42,  43}, { 42,  44,  81}, { 81,  83,  42}, { 46,  44,  43}, { 43,  47,  46},
{ 46,  81,  44}, { 46,  47,  45}, { 45,  84,  46}, { 52,  45,  50}, { 52,  51,  45}, { 51,  85,  45},
{ 85,  84,  45}, { 46,  84,  81}, { 50,  48,  49}, { 49,  53,  50}, { 54,  53,  49}, { 53,  52,  50},
{ 53,  51,  52}, { 53,  54,  51}, { 91,  51,  54}, { 51,  89,  85}, { 89,  51,  87}, { 51,  91,  87},
{ 55,  56,  54}, { 54,  56, 100}, { 54,  95,  91}, { 54, 100,  95}, { 55,  59,  56}, { 56,  59,  58},
{ 56,  58,  98}, { 98, 100,  56}, { 59,  57,  58}, { 57,  96,  58}, { 96,  57,  60}, { 96,  98,  58},
{ 60,  61,  62}, { 60,  62,  96}, { 64,  62,  61}, { 61,  65,  64}, { 62,  64,  96}, { 65,  63,  64},
{105,  64,  63}, { 63,  65, 102}, { 63, 102, 104}, { 63, 104, 106}, {105,  63, 106}, {105,  96,  64},
{ 65, 457, 102}, {457,  65, 465}, { 68,  66,  67}, {113,  67,  66}, { 66,  68,  72}, { 72, 117,  66},
{113,  66, 119}, {117, 119,  66}, { 71,  68,  67}, { 67, 109,  71}, {109,  67, 113}, { 71,  70,  68},
{ 68,  70,  72}, { 70,  71,  69}, {483,  69,  71}, {109, 108,  71}, {442,  71, 108}, {483,  71, 442},
{ 72,  73,  74}, { 74, 117,  72}, { 76,  74,  73}, { 73,  77,  76}, { 76, 117,  74}, { 77,  75,  76},
{ 75, 117,  76}, { 75,  78, 123}, { 75, 125, 117}, {125,  75, 123}, { 78,  79,  80}, { 78,  80, 123},
{ 83,  80,  79}, { 83,  82,  80}, {131,  80,  82}, {123,  80, 127}, {131, 127,  80}, { 82,  83,  81},
{ 82,  81,  84}, { 84, 129,  82}, {129, 131,  82}, { 85,  86,  84}, { 86, 129,  84}, { 85,  88,  86},
{ 88,  85,  89}, { 88, 129,  86}, { 87,  88,  89}, { 87, 133,  88}, { 87,  91,  90}, {137,  87,  90},
{ 87, 137, 133}, {133, 129,  88}, { 92,  90,  91}, {138,  90,  92}, { 90, 135, 137}, { 90, 138, 135},
{ 95,  92,  91}, { 94,  92,  95}, { 92,  94, 138}, { 95,  93,  94}, { 93, 139,  94}, {100,  93,  95},
{100,  99,  93}, { 93,  99, 143}, {139,  93, 143}, {139, 138,  94}, { 98,  96,  97}, {105,  97,  96},
{101,  98,  97}, {101,  97, 144}, { 97, 105, 144}, { 98, 101, 100}, {101,  99, 100}, {146,  99, 101},
{148, 143,  99}, {146, 148,  99}, {146, 101, 144}, {103, 104, 102}, {153, 103, 102}, {455, 153, 102},
{455, 102, 457}, {103, 107, 104}, {103, 153, 107}, {107, 106, 104}, {105, 106, 107}, {107, 144, 105},
{144, 107, 153}, {110, 108, 109}, {157, 108, 110}, {157, 444, 108}, {444, 442, 108}, {113, 110, 109},
{113, 112, 110}, {161, 110, 112}, {161, 157, 110}, {111, 112, 113}, {112, 111, 159}, {119, 111, 113},
{115, 114, 111}, {111, 114, 165}, {115, 111, 119}, {167, 159, 111}, {167, 111, 165}, {161, 112, 159},
{114, 115, 116}, {171, 114, 116}, {114, 173, 165}, {171, 173, 114}, {116, 115, 119}, {116, 119, 118},
{116, 118, 121}, {120, 116, 121}, {116, 120, 171}, {119, 117, 118}, {125, 118, 117}, {125, 121, 118},
{122, 120, 121}, {179, 120, 122}, {174, 171, 120}, {120, 175, 174}, {175, 120, 179}, {122, 121, 124},
{121, 125, 124}, {124, 126, 122}, {179, 122, 126}, {124, 125, 123}, {127, 124, 123}, {124, 127, 126},
{126, 127, 128}, {182, 126, 128}, {179, 126, 177}, {183, 177, 126}, {184, 126, 182}, {183, 126, 184},
{130, 128, 127}, {130, 127, 131}, {180, 128, 130}, {182, 128, 180}, {130, 131, 129}, {132, 130, 129},
{132, 129, 133}, {130, 132, 180}, {134, 132, 133}, {134, 188, 132}, {180, 132, 190}, {190, 132, 188},
{136, 134, 133}, {133, 137, 136}, {136, 186, 134}, {188, 134, 186}, {137, 135, 136}, {135, 186, 136},
{135, 138, 186}, {139, 140, 138}, {138, 140, 186}, {142, 140, 139}, {139, 143, 142}, {140, 142, 186},
{141, 142, 143}, {141, 187, 142}, {147, 141, 143}, {141, 147, 195}, {141, 197, 187}, {195, 197, 141},
{142, 187, 186}, {143, 148, 147}, {145, 146, 144}, {144, 201, 145}, {153, 201, 144}, {148, 146, 145},
{145, 149, 148}, {149, 145, 201}, {148, 149, 147}, {147, 149, 196}, {147, 196, 195}, {201, 196, 149},
{152, 150, 151}, {208, 151, 150}, {451, 150, 152}, {150, 204, 206}, {204, 150, 451}, {150, 206, 208},
{151, 155, 152}, {151, 202, 155}, {151, 200, 202}, {200, 151, 208}, {152, 155, 154}, {154, 453, 152},
{451, 152, 453}, {155, 153, 154}, {455, 154, 153}, {153, 155, 201}, {453, 154, 455}, {155, 202, 201},
{156, 157, 158}, {446, 157, 156}, {213, 156, 158}, {448, 156, 213}, {448, 446, 156}, {161, 158, 157},
{446, 444, 157}, {160, 158, 161}, {158, 160, 213}, {161, 159, 160}, {160, 159, 221}, {159, 163, 162},
{159, 162, 219}, {163, 159, 167}, {219, 221, 159}, {213, 160, 221}, {162, 163, 164}, {225, 162, 164},
{227, 219, 162}, {225, 227, 162}, {167, 164, 163}, {166, 164, 167}, {164, 166, 169}, {168, 164, 169},
{225, 164, 168}, {167, 165, 166}, {165, 173, 166}, {173, 169, 166}, {170, 168, 169}, {168, 170, 231},
{231, 225, 168}, {173, 170, 169}, {170, 173, 172}, {172, 174, 170}, {170, 174, 231}, {173, 171, 172},
{172, 171, 174}, {174, 175, 176}, {176, 232, 174}, {231, 174, 232}, {178, 176, 175}, {175, 179, 178},
{178, 230, 176}, {230, 232, 176}, {177, 178, 179}, {177, 236, 178}, {183, 234, 177}, {234, 236, 177},
{230, 178, 238}, {178, 236, 238}, {180, 181, 182}, {190, 181, 180}, {182, 181, 185}, {185, 181, 240},
{189, 181, 190}, {189, 240, 181}, {184, 182, 185}, {185, 183, 184}, {242, 183, 185}, {234, 183, 242},
{240, 242, 185}, {186, 187, 188}, {190, 188, 187}, {191, 190, 187}, {187, 197, 191}, {191, 189, 190},
{246, 189, 191}, {240, 189, 246}, {246, 191, 197}, {193, 194, 192}, {192, 246, 193}, {192, 194, 201},
{192, 203, 199}, {199, 252, 192}, {203, 192, 201}, {192, 247, 246}, {247, 192, 306}, {254, 192, 252},
{256, 192, 254}, {306, 192, 256}, {193, 197, 194}, {197, 193, 246}, {194, 197, 196}, {194, 196, 201},
{195, 196, 197}, {200, 198, 199}, {199, 198, 252}, {198, 200, 207}, {261, 198, 207}, {263, 252, 198},
{261, 263, 198}, {199, 202, 200}, {203, 202, 199}, {208, 207, 200}, {202, 203, 201}, {205, 206, 204},
{267, 205, 204}, {204, 449, 267}, {204, 451, 449}, {205, 208, 206}, {205, 209, 208}, {205, 267, 209},
{209, 207, 208}, {209, 261, 207}, {267, 261, 209}, {212, 210, 211}, {211, 210, 448}, {273, 210, 212},
{273, 275, 210}, {450, 210, 275}, {448, 210, 450}, {214, 212, 211}, {211, 215, 214}, {448, 215, 211},
{214, 216, 212}, {273, 212, 216}, {214, 215, 213}, {214, 213, 217}, {215, 448, 213}, {217, 213, 221},
{217, 216, 214}, {216, 217, 218}, {279, 216, 218}, {273, 216, 274}, {216, 279, 274}, {218, 217, 221},
{221, 220, 218}, {218, 220, 222}, {279, 218, 222}, {221, 219, 220}, {223, 220, 219}, {223, 219, 227},
{223, 222, 220}, {224, 222, 223}, {222, 224, 285}, {222, 280, 279}, {222, 285, 280}, {224, 223, 226},
{226, 223, 227}, {224, 226, 285}, {227, 225, 226}, {226, 225, 233}, {233, 225, 231}, {226, 233, 229},
{226, 229, 285}, {229, 230, 228}, {228, 285, 229}, {230, 237, 228}, {288, 228, 237}, {286, 285, 228},
{228, 292, 286}, {228, 288, 290}, {290, 292, 228}, {229, 233, 230}, {230, 233, 232}, {230, 238, 237},
{231, 232, 233}, {236, 234, 235}, {244, 235, 234}, {234, 242, 244}, {238, 236, 235}, {235, 239, 238},
{297, 239, 235}, {235, 244, 243}, {243, 298, 235}, {235, 298, 297}, {238, 239, 237}, {239, 297, 237},
{237, 297, 288}, {242, 240, 241}, {241, 240, 246}, {241, 245, 242}, {248, 245, 241}, {246, 248, 241},
{242, 245, 244}, {243, 244, 245}, {304, 243, 245}, {296, 243, 294}, {303, 294, 243}, {298, 243, 296},
{304, 303, 243}, {248, 250, 245}, {250, 304, 245}, {247, 248, 246}, {247, 250, 248}, {247, 251, 250},
{308, 251, 247}, {308, 247, 306}, {250, 251, 249}, {250, 249, 302}, {251, 310, 249}, {249, 300, 302},
{310, 300, 249}, {302, 304, 250}, {251, 308, 310}, {254, 252, 253}, {253, 252, 316}, {263, 259, 252},
{259, 316, 252}, {253, 257, 254}, {315, 257, 253}, {315, 253, 316}, {256, 254, 257}, {257, 255, 256},
{306, 256, 255}, {315, 255, 257}, {306, 255, 307}, {307, 255, 315}, {259, 260, 258}, {316, 259, 258},
{260, 269, 258}, {269, 322, 258}, {258, 312, 314}, {321, 312, 258}, {316, 258, 314}, {258, 322, 321},
{262, 260, 259}, {262, 259, 263}, {262, 267, 260}, {267, 269, 260}, {263, 261, 262}, {262, 261, 267},
{266, 264, 265}, {264, 320, 265}, {447, 264, 266}, {318, 320, 264}, {445, 318, 264}, {445, 264, 447},
{266, 265, 269}, {322, 269, 265}, {322, 265, 320}, {266, 269, 268}, {268, 449, 266}, {449, 447, 266},
{269, 267, 268}, {267, 449, 268}, {270, 271, 272}, {452, 271, 270}, {277, 270, 272}, {327, 270, 277},
{329, 270, 327}, {452, 270, 329}, {271, 275, 272}, {450, 275, 271}, {452, 450, 271}, {274, 272, 275},
{279, 272, 274}, {272, 281, 277}, {272, 279, 281}, {275, 273, 274}, {276, 277, 278}, {276, 327, 277},
{287, 276, 278}, {276, 287, 283}, {333, 276, 283}, {333, 327, 276}, {280, 278, 277}, {277, 281, 280},
{280, 285, 278}, {285, 287, 278}, {280, 281, 279}, {284, 282, 283}, {334, 283, 282}, {282, 284, 291},
{291, 336, 282}, {282, 338, 334}, {338, 282, 336}, {283, 287, 284}, {334, 333, 283}, {286, 284, 287},
{284, 286, 292}, {284, 292, 291}, {285, 286, 287}, {289, 290, 288}, {288, 297, 289}, {292, 290, 289},
{289, 293, 292}, {293, 289, 345}, {289, 297, 346}, {346, 345, 289}, {291, 292, 293}, {291, 293, 345},
{345, 336, 291}, {294, 295, 296}, {295, 294, 352}, {303, 352, 294}, {295, 299, 296}, {342, 299, 295},
{295, 351, 342}, {352, 351, 295}, {298, 296, 299}, {298, 299, 297}, {297, 299, 344}, {344, 346, 297},
{344, 299, 342}, {302, 300, 301}, {309, 301, 300}, {309, 300, 310}, {301, 305, 302}, {354, 305, 301},
{354, 301, 309}, {302, 305, 304}, {303, 304, 305}, {348, 303, 305}, {348, 350, 303}, {350, 352, 303},
{348, 305, 354}, {307, 308, 306}, {311, 308, 307}, {363, 311, 307}, {364, 307, 315}, {364, 363, 307},
{310, 308, 311}, {311, 309, 310}, {363, 309, 311}, {354, 309, 355}, {355, 309, 363}, {314, 312, 313},
{369, 313, 312}, {323, 312, 321}, {323, 370, 312}, {369, 312, 370}, {313, 316, 314}, {317, 316, 313},
{313, 362, 317}, {360, 362, 313}, {313, 369, 360}, {316, 317, 315}, {364, 315, 317}, {317, 362, 364},
{320, 318, 319}, {366, 319, 318}, {318, 443, 366}, {443, 318, 445}, {320, 319, 322}, {319, 323, 322},
{319, 368, 323}, {368, 319, 366}, {323, 321, 322}, {323, 368, 370}, {326, 324, 325}, {454, 325, 324},
{372, 324, 326}, {372, 374, 324}, {376, 324, 374}, {324, 376, 375}, {324, 375, 454}, {325, 329, 326},
{452, 329, 325}, {452, 325, 454}, {326, 329, 328}, {335, 326, 328}, {335, 331, 326}, {372, 326, 331},
{328, 329, 327}, {328, 327, 333}, {335, 328, 333}, {332, 330, 331}, {382, 331, 330}, {339, 330, 332},
{330, 339, 378}, {378, 380, 330}, {382, 330, 380}, {334, 332, 331}, {331, 335, 334}, {372, 331, 382},
{334, 340, 332}, {339, 332, 340}, {333, 334, 335}, {338, 340, 334}, {337, 338, 336}, {345, 337, 336},
{341, 338, 337}, {384, 341, 337}, {337, 345, 384}, {340, 338, 341}, {341, 339, 340}, {386, 339, 341},
{339, 386, 378}, {384, 386, 341}, {342, 343, 344}, {393, 343, 342}, {351, 394, 342}, {342, 394, 393},
{344, 343, 347}, {343, 393, 347}, {344, 347, 346}, {347, 345, 346}, {347, 384, 345}, {347, 393, 384},
{348, 349, 350}, {349, 348, 399}, {348, 354, 356}, {356, 358, 348}, {358, 399, 348}, {350, 349, 353},
{349, 390, 353}, {390, 349, 399}, {352, 350, 353}, {352, 353, 351}, {353, 392, 351}, {351, 392, 394},
{392, 353, 390}, {355, 356, 354}, {355, 358, 356}, {355, 359, 358}, {355, 363, 359}, {358, 359, 357},
{399, 358, 357}, {402, 357, 359}, {400, 357, 398}, {357, 404, 398}, {357, 400, 399}, {357, 402, 404},
{363, 402, 359}, {360, 361, 362}, {360, 411, 361}, {369, 412, 360}, {360, 412, 411}, {362, 361, 365},
{402, 365, 361}, {411, 402, 361}, {362, 365, 364}, {363, 364, 365}, {365, 402, 363}, {368, 366, 367},
{366, 408, 367}, {408, 366, 482}, {441, 366, 443}, {441, 484, 366}, {366, 484, 482}, {368, 367, 370},
{370, 367, 371}, {367, 410, 371}, {408, 410, 367}, {371, 369, 370}, {369, 371, 412}, {371, 410, 412},
{374, 372, 373}, {373, 372, 381}, {381, 372, 382}, {373, 377, 374}, {377, 373, 416}, {381, 416, 373},
{374, 377, 376}, {375, 376, 377}, {375, 377, 418}, {375, 418, 417}, {458, 375, 417}, {454, 375, 456},
{456, 375, 458}, {418, 377, 416}, {380, 378, 379}, {387, 379, 378}, {388, 378, 386}, {387, 378, 388},
{379, 383, 380}, {420, 383, 379}, {379, 387, 420}, {380, 383, 382}, {381, 382, 383}, {422, 381, 383},
{414, 416, 381}, {414, 381, 422}, {383, 420, 422}, {385, 386, 384}, {384, 393, 385}, {385, 388, 386},
{389, 388, 385}, {389, 385, 429}, {430, 385, 393}, {429, 385, 430}, {389, 387, 388}, {387, 389, 429},
{420, 387, 429}, {391, 392, 390}, {391, 390, 432}, {390, 399, 401}, {432, 390, 401}, {394, 392, 391},
{395, 394, 391}, {426, 395, 391}, {432, 426, 391}, {394, 395, 393}, {428, 393, 395}, {393, 428, 430},
{426, 428, 395}, {396, 397, 398}, {474, 397, 396}, {406, 396, 398}, {405, 396, 406}, {396, 405, 474},
{397, 401, 398}, {432, 401, 397}, {474, 432, 397}, {398, 401, 400}, {406, 398, 404}, {401, 399, 400},
{403, 404, 402}, {403, 402, 411}, {403, 407, 404}, {407, 403, 413}, {413, 403, 411}, {407, 406, 404},
{405, 406, 407}, {407, 476, 405}, {476, 474, 405}, {413, 478, 407}, {407, 478, 476}, {408, 409, 410},
{480, 409, 408}, {482, 480, 408}, {410, 409, 413}, {409, 478, 413}, {409, 480, 478}, {413, 412, 410},
{411, 412, 413}, {416, 414, 415}, {414, 423, 415}, {424, 414, 422}, {414, 424, 423}, {416, 415, 419},
{415, 466, 419}, {423, 466, 415}, {418, 416, 419}, {417, 418, 419}, {419, 464, 417}, {462, 458, 417},
{417, 464, 462}, {464, 419, 466}, {422, 420, 421}, {420, 429, 421}, {421, 424, 422}, {425, 424, 421},
{468, 425, 421}, {468, 421, 429}, {424, 425, 423}, {468, 423, 425}, {468, 466, 423}, {426, 427, 428},
{427, 426, 470}, {432, 434, 426}, {436, 426, 434}, {426, 436, 435}, {470, 426, 435}, {430, 428, 427},
{430, 427, 431}, {431, 427, 470}, {431, 429, 430}, {429, 431, 468}, {470, 468, 431}, {434, 432, 433},
{474, 433, 432}, {433, 437, 434}, {437, 433, 474}, {436, 434, 437}, {437, 435, 436}, {472, 435, 437},
{472, 470, 435}, {474, 472, 437}, {440, 438, 485}, {439, 484, 441}, {442, 440, 485}, {483, 442, 485},
{459, 457, 465}, {462, 460, 458}, {461, 459, 463}, {465, 463, 459}
};


TEST(mega_test)
{
  const size_t nPoints = 486;
  const size_t nTriangles = 922;

  triangulateio in, out;
  InitTriangulateIO(in);
  InitTriangulateIO(out);

  // Define input points.
  in.numberofpoints = nPoints;
  in.pointlist = (REAL*)malloc(in.numberofpoints * 2 * sizeof(REAL));

  for (size_t i = 0; i < nPoints; ++i) {
    in.pointlist[2*i]   = points[i].x;
    in.pointlist[2*i+1] = points[i].y;
  }
  char switches[] = "zcNVQ";

  triangulate(switches, &in, &out, NULL);

  ENSURE_EQUAL(out.numberofcorners, 3, "Invalid number of triangle corners");

  ENSURE_EQUAL(out.numberoftriangles, nTriangles, "Invalid number of triangles");

  vector<Triangle> triangles_out;
  for (int i = 0; i<out.numberoftriangles; ++i) {
    triangles_out.push_back({points[out.trianglelist[3*i]], points[out.trianglelist[3*i+1]], points[out.trianglelist[3*i+2]]});
  }
  std::sort(triangles_out.begin(), triangles_out.end(), triangle_order);
  const vector<Point> points_in(&points[0], &points[nPoints]);

  cout << "Points" << endl;
  for (auto& p: points_in) {
    cout << p.x << " " << p.y << endl;
  }
  cout << "Triangles" << endl;
  for (auto& t: triangles_out) {
    cout << t.p1.id << " " << t.p2.id << " " << t.p3.id << endl;
  }

  CheckDelaunay(points_in, triangles_out);
  CheckHandedness(points_in, triangles_out);

  FreeTriangulateMemory(in);
  FreeTriangulateMemory(out);
}

