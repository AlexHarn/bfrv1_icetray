DST Scripts
============

Examples
^^^^^^^^^^^^
The directory dst/resources/examples contains examples for encoding and decoding DST data from IceCube reconstructions.


dst_catalog.py
^^^^^^^^^^^^^^
This script interacts with I3Live to generate a JSON database of good runs and associated files that can be used in production for decoding DST data from PFFilt files::
   
   Usage: dst_catalog.py [options]

   Options:
     -h, --help            show this help message and exit
     -p PROCNUM, --procnum=PROCNUM
                           Job number
     -o OUTDIR, --outdir=OUTDIR
                            Write output to OUTDIR
     -f FORMAT, --format=FORMAT
                           Write output format (.root, .hdf5)
     -g GCDFILE, --gcd=GCDFILE
                           Read geometry from GCDFILE (.i3{.gz} format).
     -d DIR, --dir=DIR     Directory
     -c CHUNKSIZE, --chunk-size=CHUNKSIZE
                           Chunk of data to process
     -v DSTVERSION, --dst-version=DSTVERSION
                           DST version to read (dst13,dst16)
     -s START, --start-run=START
                           Start run
     -e END, --end-run=END
                           End run
     -u URL, --url=URL     GridFTP URL
     -j JSON, --json=JSON  JSON catalog file


dstprocess.py
^^^^^^^^^^^^^
Script for production-based extraction of DST from PFFilt files. It requires a JSON database generated by dst_catalog.py::
   
   Usage: dstprocess.py [options]

   Options:
     -h, --help            show this help message and exit
     -p PROCNUM, --procnum=PROCNUM
                           Job number
     -x, --extract-to-frame
                           Extract DST to standar I3Reco objects in frame
     -c, --cut             Apply cuts
     -j JSON, --json=JSON  JSON catalog file


dstread.py
^^^^^^^^^^
Script for manual (non-production) extraction of DST from PFFilt files::

   Usage: dstread.py [options]
   
   Options:
     -h, --help            show this help message and exit
     -o OUTFILE, --outfile=OUTFILE
                           Write output to OUTFILE (.root, .hdf5 format)
     -i INFILELIST, --infile=INFILELIST
                           Read (.i3{.gz})
     -g GCDFILE, --gcd=GCDFILE
                           Read geometry from GCDFILE (.i3{.gz} format).
     -r RUN, --run=RUN     Run
     -d DIR, --dir=DIR     Directory
     -u CHUNK, --chunk=CHUNK
                           Chunk of data to process
     -n NCHUNK, --nchunks=NCHUNK
                           Number of chunks
     -v DSTVERSION, --dst-version=DSTVERSION
                           DST version to read (dst13,dst16)
     -x, --extract-to-frame
                           Extract DST to standar I3Reco objects in frame
     -c, --cut             Apply cuts
